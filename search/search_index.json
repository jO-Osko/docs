{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome \u00b6 Welcome to the Flare Network Technical Documentation site! Use the navigation menu to explore the Technology or Tutorial pages. Note These pages are a Work In Progress . Join the Flare community on Discord if there is anything you cannot find here.","title":"Welcome"},{"location":"#welcome","text":"Welcome to the Flare Network Technical Documentation site! Use the navigation menu to explore the Technology or Tutorial pages. Note These pages are a Work In Progress . Join the Flare community on Discord if there is anything you cannot find here.","title":"Welcome"},{"location":"networks/coston-testnet/","text":"\ud83d\udd2c Coston Test Network \u00b6 Follow the links below to get started with the Coston testnet: Chain ID: 16 Asset Code: CFLR RPC Endpoint: https://coston-api.flare.network/ext/bc/C/rpc WebSocket Endpoint: wss://coston-api.flare.network/ext/bc/C/ws API Docs: https://web3js.readthedocs.io/en/v1.3.4/ Block Explorer: https://coston-explorer.flare.network/ CFLR Faucet: https://faucet.towolabs.com/ Running a Node: https://gitlab.com/flarenetwork/flare/-/tags/coston","title":"\ud83d\udd2c Coston Test Network"},{"location":"networks/coston-testnet/#coston-test-network","text":"Follow the links below to get started with the Coston testnet: Chain ID: 16 Asset Code: CFLR RPC Endpoint: https://coston-api.flare.network/ext/bc/C/rpc WebSocket Endpoint: wss://coston-api.flare.network/ext/bc/C/ws API Docs: https://web3js.readthedocs.io/en/v1.3.4/ Block Explorer: https://coston-explorer.flare.network/ CFLR Faucet: https://faucet.towolabs.com/ Running a Node: https://gitlab.com/flarenetwork/flare/-/tags/coston","title":"\ud83d\udd2c Coston Test Network"},{"location":"networks/songbird/","text":"\ud83d\udc26 Songbird Canary Network \u00b6 Follow the links below to get started with the Songbird canary network: Chain ID: 19 Asset Code: SGB RPC Endpoint: https://songbird.towolabs.com/rpc API Docs: https://web3js.readthedocs.io/en/v1.3.4/ Block Explorer: https://songbird-explorer.flare.network/ Running a Node: https://gitlab.com/flarenetwork/flare","title":"\ud83d\udc26 Songbird Canary Network"},{"location":"networks/songbird/#songbird-canary-network","text":"Follow the links below to get started with the Songbird canary network: Chain ID: 19 Asset Code: SGB RPC Endpoint: https://songbird.towolabs.com/rpc API Docs: https://web3js.readthedocs.io/en/v1.3.4/ Block Explorer: https://songbird-explorer.flare.network/ Running a Node: https://gitlab.com/flarenetwork/flare","title":"\ud83d\udc26 Songbird Canary Network"},{"location":"technology/glossary/","text":"\ud83d\udd20 Glossary \u00b6 Attestation A data proof provided to the State Connector by a decentralized network of Attestation Providers that confirms the validity or otherwise of any request. Avalanche An open-source blockchain using the Snow family of consensus protocols and Proof of Stake for Sybil resistance . It is advertised as the fastest smart contract platform. Block For performance reasons, blockchains do not process transactions one by one. Instead, transactions are grouped together in blocks which are then validated by the consensus algorithm. Blockchain Digital ledger storing data and transactions on a distributed network of computers to make it more robust. Cryptography protects against information tampering, and a consensus algorithm ensures that the majority of the network agrees on the stored data even if some of its nodes act maliciously. Byzantine Fault Tolerance Property of a distributed system that is capable of continuous operation even when some of its participants are unreliable. Participants acting against the interest of the whole system, by accident or on purpose, are said to have \u201cgone Byzantine\u201d. Canary Network A network used for testing features under \u201creal fire\u201d conditions, before deploying them on the main network . All users of the canary network are real users, but they are aware of the experimental nature of the platform. The name comes from the time when actual miners used actual canaries to detect the presence of poisonous gas in the mines. Flare's canary network is called Songbird . Consensus Algorithm that makes nodes on a blockchain\u2019s network agree on the validity of a given transaction, even if some of the nodes provide invalid transactions or try to disrupt the network ( Byzantine Fault Tolerance ). Coston The name given to the Flare public test network launched in January 2021, in remembrance and celebration of a great inventor, Martha J. Coston (1826-1904). Cross-chain (or inter-ecosystem) interoperability Communication between two or more disparate blockchain ecosystems that are technologically incompatible due to the lack of shared systems, protocols or code (e.g. Ethereum and Solana). DAO A Decentralized Autonomous Organization is an entity with no central authority. Its governance is mandated by rules encoded on a blockchain so it is tamper-proof. dApp A Decentralized Application is a computer program that makes use of blockchain technology and therefore the information it uses or stores has the same benefits (trustlessness, censorship resistance, geographical redundancy, etc). The dapp itself may or may not be hosted on a blockchain. Data Provider Each of the multiple programs supplying external information to an FTSO running on the Flare network, and getting rewarded for it. Token holders can delegate their stake to a data provider and receive a share of the rewards. DeFi Decentralized Finance is a form of finance that does not rely on a central financial institution. DeFi is commonly based on blockchain technology. Delegate To assign a duty to someone else so they do it for you. On the Flare network, an address can delegate any fraction of the votes associated with the tokens it holds to another address, for the purpose of FTSO weighting or governance participation. Note that no tokens are transferred. EVM The Ethereum Virtual Machine allows executing smart contracts on the Ethereum network, regardless of the kind of computer that executes it. Multiple blockchain networks, including Flare, support EVM contracts. FBA Federated Byzantine Agreement is a form of Byzantine fault tolerance where each node keeps its own list of trusted nodes. It does not require nodes to invest stake or computing power as Proof of Stake or Proof of Work protocols do. FCP The Flare Consensus Protocol is an asynchronous, ordered and leaderless version of Federated Byzantine Agreement ( FBA ) consensus. The whitepaper is already available and it is currently in the process of being implemented. Flare Token (FLR) The native currency of the Flare Network. FTSO The Flare Time Series Oracles provide external information to the Flare network in a decentralized manner, by using multiple independent data providers that are rewarded for providing accurate information. Governance Mechanism to propose, vote and implement changes on a blockchain protocol. On Flare, anybody can propose updates and token holders vote to accept them. Ledger Historically, a book where financial transactions are recorded. In blockchain technology a ledger can contain any kind of information and it has multiple copies distributed among several computers, which are kept in sync by a consensus algorithm. Light Client Relay A simplified communication mechanism built for speed that only queries the header data of any transaction and therefore lacks the security that comes from querying a full node with full history (e.g. SPV ). Liquidity Pool A collection of funds locked in a smart contract for the purpose of facilitating trading, lending and other functionality in a decentralized manner. Main Network (MAINNET) The computer network that supports a blockchain in its production stage, i.e., the real thing (instead of a Canary or Test network). Metaverse An old concept, at times called Virtual Reality or Cyberspace, that translates human interaction to virtual (i.e. non-physical) worlds. Currently in vogue again because blockchain technology promises to link the physical and the virtual worlds and thus bring a degree of reality to the latter. Multi-chain (or intra-ecosystem) interoperability Communication between two or more technologically compatible blockchains that exist within the same ecosystem and share systems, protocols and code (e.g. Polkadot Parachains, Cosmos Tendermint chains or Ethereum layer 2 protocols). NFT Non-Fungible Tokens are digital representations of assets which are unique and therefore non-mergeable (non-fungible), made impossible to copy by blockchain technology. Common use cases are certificates of authenticity or ownership, or limited edition collectibles. Most NFT tokens are built on the Ethereum network using standards ERC-721 and ERC-1155. Oracle A mechanism to provide external information to a blockchain, so that it can be used by smart contracts , for example. Flare oracles are called FTSO . Proof of Stake A kind of Sybil resistance based on staking assets to participate in consensus. The rationale is that a participant investing enough assets will not be interested in attacking the network that supports such assets. Moreover, if malicious behavior is detected part of the assets can be taken as punishment. Proof of Work A kind of Sybil resistance based on spending computer power to participate in consensus. The rationale is that attacking the network becomes prohibitively expensive in terms of computer power. Quantum Resistance The ability of a cryptographic algorithm (and therefore of a blockchain) to resist an attack from a theoretical quantum computer. Quorum Set of participants on a consensus algorithm that must agree on a result for the whole network to accept that result. On a blockchain, once consensus is reached about a block , it is added to the ledger and the next block is processed. Quorum Slice In FBA consensus each node has multiple lists of other nodes which it voluntarily decides to trust, forming its quorum slices. All nodes in a quorum slice agreeing on a result are enough to convince the node of that result. If the quorum slices are correctly built, global quorum emerges from these local quorum slices. RPC Remote Procedure Call is a protocol that allows a program executing on a computer to request a service from another program, typically running on a different computer. Smart Contract Computer program running on a blockchain, typically one based on the EVM . The blockchain\u2019s immutability ensures that the contract is not tampered with, and running it on several machines bound together by a consensus algorithm ensures faithful execution. Smart contracts are said to be self-enforcing. Songbird Flare's canary network , launched in September 2021. State Connector Piece of the Flare network that keeps track of the state of other networks, facilitating the implementation of advanced mechanisms like the FAssets. The State Connector uses several independent Attestation Providers that are rewarded for providing correct information. Read more... Sybil Resistance The ability of a distributed system to overcome a Sybil attack, in which a malicious actor creates multiple identities to gain voting or mining power. Resistance is typically gained by making voting or mining too costly for the attack to be worth it (as in Proof of Work or Proof of Stake ) or by requiring new entities to be approved by existing actors (as in FBA ). Test Network (TESTNET) The computer network that supports a blockchain in its development stage. It is intended for testing purposes and should not store valuable assets, as its contents might be deleted (purposely or by accident) at any time. Compare to a Canary or Main network. Flare's testnet is called Coston . Transaction A request to add information to the blockchain, which is then analyzed by the network and accepted when consensus is reached about its validity. It can be a movement of funds between two accounts, or the execution of a contract, for example. Transaction Fee Amount of cryptocurrency that must be paid by anybody submitting a transaction for inclusion on a blockchain. These fees reward block producers for their work processing transactions, and typically vary depending on network congestion. Token A digital representation of an asset. Fungible tokens are indistinguishable from one another so they can be merged together (e.g. a cryptocurrency). Non-fungible tokens ( NFT ) are unique and therefore cannot be merged. Turing-completeness The ability of a machine to solve any computational problem, no matter how complex, given the necessary steps and enough time and memory. This is a mandatory feature of any general-purpose processor like a CPU or the EVM . Validator A validator node is a machine connected to a blockchain network that verifies transactions and emits a vote. When there is a quorum among all validators regarding a given block of transactions, they are accepted into the blockchain. Wen flare The war cry of all the impatient that would like to see the Flare network launch before it is fully tested. Pay no heed to them. /*Glossary links from within the glossary page*/ a[href^=\"#\"] { text-decoration-style: dotted; text-decoration-thickness: 1px; }","title":"\ud83d\udd20 Glossary"},{"location":"technology/glossary/#glossary","text":"Attestation A data proof provided to the State Connector by a decentralized network of Attestation Providers that confirms the validity or otherwise of any request. Avalanche An open-source blockchain using the Snow family of consensus protocols and Proof of Stake for Sybil resistance . It is advertised as the fastest smart contract platform. Block For performance reasons, blockchains do not process transactions one by one. Instead, transactions are grouped together in blocks which are then validated by the consensus algorithm. Blockchain Digital ledger storing data and transactions on a distributed network of computers to make it more robust. Cryptography protects against information tampering, and a consensus algorithm ensures that the majority of the network agrees on the stored data even if some of its nodes act maliciously. Byzantine Fault Tolerance Property of a distributed system that is capable of continuous operation even when some of its participants are unreliable. Participants acting against the interest of the whole system, by accident or on purpose, are said to have \u201cgone Byzantine\u201d. Canary Network A network used for testing features under \u201creal fire\u201d conditions, before deploying them on the main network . All users of the canary network are real users, but they are aware of the experimental nature of the platform. The name comes from the time when actual miners used actual canaries to detect the presence of poisonous gas in the mines. Flare's canary network is called Songbird . Consensus Algorithm that makes nodes on a blockchain\u2019s network agree on the validity of a given transaction, even if some of the nodes provide invalid transactions or try to disrupt the network ( Byzantine Fault Tolerance ). Coston The name given to the Flare public test network launched in January 2021, in remembrance and celebration of a great inventor, Martha J. Coston (1826-1904). Cross-chain (or inter-ecosystem) interoperability Communication between two or more disparate blockchain ecosystems that are technologically incompatible due to the lack of shared systems, protocols or code (e.g. Ethereum and Solana). DAO A Decentralized Autonomous Organization is an entity with no central authority. Its governance is mandated by rules encoded on a blockchain so it is tamper-proof. dApp A Decentralized Application is a computer program that makes use of blockchain technology and therefore the information it uses or stores has the same benefits (trustlessness, censorship resistance, geographical redundancy, etc). The dapp itself may or may not be hosted on a blockchain. Data Provider Each of the multiple programs supplying external information to an FTSO running on the Flare network, and getting rewarded for it. Token holders can delegate their stake to a data provider and receive a share of the rewards. DeFi Decentralized Finance is a form of finance that does not rely on a central financial institution. DeFi is commonly based on blockchain technology. Delegate To assign a duty to someone else so they do it for you. On the Flare network, an address can delegate any fraction of the votes associated with the tokens it holds to another address, for the purpose of FTSO weighting or governance participation. Note that no tokens are transferred. EVM The Ethereum Virtual Machine allows executing smart contracts on the Ethereum network, regardless of the kind of computer that executes it. Multiple blockchain networks, including Flare, support EVM contracts. FBA Federated Byzantine Agreement is a form of Byzantine fault tolerance where each node keeps its own list of trusted nodes. It does not require nodes to invest stake or computing power as Proof of Stake or Proof of Work protocols do. FCP The Flare Consensus Protocol is an asynchronous, ordered and leaderless version of Federated Byzantine Agreement ( FBA ) consensus. The whitepaper is already available and it is currently in the process of being implemented. Flare Token (FLR) The native currency of the Flare Network. FTSO The Flare Time Series Oracles provide external information to the Flare network in a decentralized manner, by using multiple independent data providers that are rewarded for providing accurate information. Governance Mechanism to propose, vote and implement changes on a blockchain protocol. On Flare, anybody can propose updates and token holders vote to accept them. Ledger Historically, a book where financial transactions are recorded. In blockchain technology a ledger can contain any kind of information and it has multiple copies distributed among several computers, which are kept in sync by a consensus algorithm. Light Client Relay A simplified communication mechanism built for speed that only queries the header data of any transaction and therefore lacks the security that comes from querying a full node with full history (e.g. SPV ). Liquidity Pool A collection of funds locked in a smart contract for the purpose of facilitating trading, lending and other functionality in a decentralized manner. Main Network (MAINNET) The computer network that supports a blockchain in its production stage, i.e., the real thing (instead of a Canary or Test network). Metaverse An old concept, at times called Virtual Reality or Cyberspace, that translates human interaction to virtual (i.e. non-physical) worlds. Currently in vogue again because blockchain technology promises to link the physical and the virtual worlds and thus bring a degree of reality to the latter. Multi-chain (or intra-ecosystem) interoperability Communication between two or more technologically compatible blockchains that exist within the same ecosystem and share systems, protocols and code (e.g. Polkadot Parachains, Cosmos Tendermint chains or Ethereum layer 2 protocols). NFT Non-Fungible Tokens are digital representations of assets which are unique and therefore non-mergeable (non-fungible), made impossible to copy by blockchain technology. Common use cases are certificates of authenticity or ownership, or limited edition collectibles. Most NFT tokens are built on the Ethereum network using standards ERC-721 and ERC-1155. Oracle A mechanism to provide external information to a blockchain, so that it can be used by smart contracts , for example. Flare oracles are called FTSO . Proof of Stake A kind of Sybil resistance based on staking assets to participate in consensus. The rationale is that a participant investing enough assets will not be interested in attacking the network that supports such assets. Moreover, if malicious behavior is detected part of the assets can be taken as punishment. Proof of Work A kind of Sybil resistance based on spending computer power to participate in consensus. The rationale is that attacking the network becomes prohibitively expensive in terms of computer power. Quantum Resistance The ability of a cryptographic algorithm (and therefore of a blockchain) to resist an attack from a theoretical quantum computer. Quorum Set of participants on a consensus algorithm that must agree on a result for the whole network to accept that result. On a blockchain, once consensus is reached about a block , it is added to the ledger and the next block is processed. Quorum Slice In FBA consensus each node has multiple lists of other nodes which it voluntarily decides to trust, forming its quorum slices. All nodes in a quorum slice agreeing on a result are enough to convince the node of that result. If the quorum slices are correctly built, global quorum emerges from these local quorum slices. RPC Remote Procedure Call is a protocol that allows a program executing on a computer to request a service from another program, typically running on a different computer. Smart Contract Computer program running on a blockchain, typically one based on the EVM . The blockchain\u2019s immutability ensures that the contract is not tampered with, and running it on several machines bound together by a consensus algorithm ensures faithful execution. Smart contracts are said to be self-enforcing. Songbird Flare's canary network , launched in September 2021. State Connector Piece of the Flare network that keeps track of the state of other networks, facilitating the implementation of advanced mechanisms like the FAssets. The State Connector uses several independent Attestation Providers that are rewarded for providing correct information. Read more... Sybil Resistance The ability of a distributed system to overcome a Sybil attack, in which a malicious actor creates multiple identities to gain voting or mining power. Resistance is typically gained by making voting or mining too costly for the attack to be worth it (as in Proof of Work or Proof of Stake ) or by requiring new entities to be approved by existing actors (as in FBA ). Test Network (TESTNET) The computer network that supports a blockchain in its development stage. It is intended for testing purposes and should not store valuable assets, as its contents might be deleted (purposely or by accident) at any time. Compare to a Canary or Main network. Flare's testnet is called Coston . Transaction A request to add information to the blockchain, which is then analyzed by the network and accepted when consensus is reached about its validity. It can be a movement of funds between two accounts, or the execution of a contract, for example. Transaction Fee Amount of cryptocurrency that must be paid by anybody submitting a transaction for inclusion on a blockchain. These fees reward block producers for their work processing transactions, and typically vary depending on network congestion. Token A digital representation of an asset. Fungible tokens are indistinguishable from one another so they can be merged together (e.g. a cryptocurrency). Non-fungible tokens ( NFT ) are unique and therefore cannot be merged. Turing-completeness The ability of a machine to solve any computational problem, no matter how complex, given the necessary steps and enough time and memory. This is a mandatory feature of any general-purpose processor like a CPU or the EVM . Validator A validator node is a machine connected to a blockchain network that verifies transactions and emits a vote. When there is a quorum among all validators regarding a given block of transactions, they are accepted into the blockchain. Wen flare The war cry of all the impatient that would like to see the Flare network launch before it is fully tested. Pay no heed to them. /*Glossary links from within the glossary page*/ a[href^=\"#\"] { text-decoration-style: dotted; text-decoration-thickness: 1px; }","title":"\ud83d\udd20 Glossary"},{"location":"technology/state-connector/","text":"\ud83d\udef0 State Connector \u00b6 The State Connector on Flare enables proving real-world events to any contract on Flare. Uniquely, the State Connector can also handle any notional value represented by the events it proves. This property of the system is achieved by automated branching of the Flare Network state to correct event outcomes, without degrading the time-to-finality or throughput metrics of the network. Voting Protocol \u00b6 There are three phases of the State Connector voting protocol, delineated based on the current timestamp on Flare, and overlapping such that multiple sets of requests for event proofs can be worked on in parallel. The three phases of the State Connector voting protocol. Request Phase \u00b6 At any point in time, any user can submit a request to the State Connector contract to have an event proven. The window in time that this request enters the network state is known as the request phase from its perspective. Commit Phase \u00b6 During the next window of time, attestation providers have the opportunity to commit a hidden vote regarding their belief in the outcome of the events requested in the previous phase. Anyone may operate as an attestation provider without any capital requirement, but a default incentivized set is used as the minimal requirement for passing a vote about the events in the previous set. Reveal Phase \u00b6 Finally in the next window of time, attestation providers reveal their votes that they committed to in the previous round. Once this reveal phase concludes and the next phase begins, the revealed votes are automatically counted and all valid events become immediately available to all contracts on Flare. Branching Protocol \u00b6 The State Connector branching protocol protects Flare against incorrect interpretation of real-world events, proactively , such that there are never any rollbacks on the Flare blockchain state. Instead of having rollbacks, contention on state correctness is handled via automatic state branching into a correct and incorrect path. The security assumption is that if you as an independent node operator are following along with the correct real-world state, then you will always end up on the correct branch of the blockchain state. The State Connector branching protocol. Default Attestation Providers \u00b6 The minimum requirement to confirm the existence and validity of a blockchain transaction is for it to be confirmed by a majority of the default set of Attestation Providers. Local Attestation Providers \u00b6 Anyone may also operate their own local attestation provider(s) without any capital requirement. Every Flare node operator, no matter how prominently they feature in the overall network, defines which local attestation provider(s) they wish to use for the State Connector branching protocol. A Flare node will only pass a State Connector vote if both the default set and their locally-defined set of attestation providers pass the vote: If a Flare node's locally-defined set of attestation providers disagrees with the vote made by the default set, then: The Flare node will automatically create a backup of the blockchain state at the last point that it will have in common with the default set. The Flare node will then proceed along the branch that it locally believes is correct. Else if the default set fails to pass a vote, then: No branching occurs. Scalability \u00b6 Below are examples of design considerations in the State Connector that make it highly scalable. Overlapped Voting Protocol \u00b6 Overlapped voting protocol. Every window of time during the State Connector voting protocol is an opportunity to request event proofs, meaning that while a new event is being requested, prior events can be voted on in both the commit and reveal phase. This multiplies the throughput of the state connector by a factor of three. No Storage of Requests \u00b6 When requests for new events are submitted to the State Connector contract, storage is not invoked. Instead, a Solidity event is emitted. This enables the total cost of the event request transaction to be below 2k gas, i.e. less than 0.1x the cost of a simple payment. Merkle-Tree Root Voting \u00b6 The gas usage of attestation providers is always constant, despite the number of event proof requests they handle, because they construct the valid events into a merkle tree and simply vote on the merkle tree root hash. The merkle tree algorithm can also be swapped out over time to more efficient algorithms without impacting the core State Connector voting protocol which always just votes on the root hash. New Event-Type Integrations \u00b6 New real-world event-type integrations are introduced to the State Connector via acceptance by the default attestation providers, and without requiring any changes to the core voting or branching protocols described above. This enables rapid deployment of new use-cases without any validator-level code changes.","title":"\ud83d\udef0 State Connector"},{"location":"technology/state-connector/#state-connector","text":"The State Connector on Flare enables proving real-world events to any contract on Flare. Uniquely, the State Connector can also handle any notional value represented by the events it proves. This property of the system is achieved by automated branching of the Flare Network state to correct event outcomes, without degrading the time-to-finality or throughput metrics of the network.","title":"\ud83d\udef0 State Connector"},{"location":"technology/state-connector/#voting-protocol","text":"There are three phases of the State Connector voting protocol, delineated based on the current timestamp on Flare, and overlapping such that multiple sets of requests for event proofs can be worked on in parallel. The three phases of the State Connector voting protocol.","title":"Voting Protocol"},{"location":"technology/state-connector/#request-phase","text":"At any point in time, any user can submit a request to the State Connector contract to have an event proven. The window in time that this request enters the network state is known as the request phase from its perspective.","title":"Request Phase"},{"location":"technology/state-connector/#commit-phase","text":"During the next window of time, attestation providers have the opportunity to commit a hidden vote regarding their belief in the outcome of the events requested in the previous phase. Anyone may operate as an attestation provider without any capital requirement, but a default incentivized set is used as the minimal requirement for passing a vote about the events in the previous set.","title":"Commit Phase"},{"location":"technology/state-connector/#reveal-phase","text":"Finally in the next window of time, attestation providers reveal their votes that they committed to in the previous round. Once this reveal phase concludes and the next phase begins, the revealed votes are automatically counted and all valid events become immediately available to all contracts on Flare.","title":"Reveal Phase"},{"location":"technology/state-connector/#branching-protocol","text":"The State Connector branching protocol protects Flare against incorrect interpretation of real-world events, proactively , such that there are never any rollbacks on the Flare blockchain state. Instead of having rollbacks, contention on state correctness is handled via automatic state branching into a correct and incorrect path. The security assumption is that if you as an independent node operator are following along with the correct real-world state, then you will always end up on the correct branch of the blockchain state. The State Connector branching protocol.","title":"Branching Protocol"},{"location":"technology/state-connector/#default-attestation-providers","text":"The minimum requirement to confirm the existence and validity of a blockchain transaction is for it to be confirmed by a majority of the default set of Attestation Providers.","title":"Default Attestation Providers"},{"location":"technology/state-connector/#local-attestation-providers","text":"Anyone may also operate their own local attestation provider(s) without any capital requirement. Every Flare node operator, no matter how prominently they feature in the overall network, defines which local attestation provider(s) they wish to use for the State Connector branching protocol. A Flare node will only pass a State Connector vote if both the default set and their locally-defined set of attestation providers pass the vote: If a Flare node's locally-defined set of attestation providers disagrees with the vote made by the default set, then: The Flare node will automatically create a backup of the blockchain state at the last point that it will have in common with the default set. The Flare node will then proceed along the branch that it locally believes is correct. Else if the default set fails to pass a vote, then: No branching occurs.","title":"Local Attestation Providers"},{"location":"technology/state-connector/#scalability","text":"Below are examples of design considerations in the State Connector that make it highly scalable.","title":"Scalability"},{"location":"technology/state-connector/#overlapped-voting-protocol","text":"Overlapped voting protocol. Every window of time during the State Connector voting protocol is an opportunity to request event proofs, meaning that while a new event is being requested, prior events can be voted on in both the commit and reveal phase. This multiplies the throughput of the state connector by a factor of three.","title":"Overlapped Voting Protocol"},{"location":"technology/state-connector/#no-storage-of-requests","text":"When requests for new events are submitted to the State Connector contract, storage is not invoked. Instead, a Solidity event is emitted. This enables the total cost of the event request transaction to be below 2k gas, i.e. less than 0.1x the cost of a simple payment.","title":"No Storage of Requests"},{"location":"technology/state-connector/#merkle-tree-root-voting","text":"The gas usage of attestation providers is always constant, despite the number of event proof requests they handle, because they construct the valid events into a merkle tree and simply vote on the merkle tree root hash. The merkle tree algorithm can also be swapped out over time to more efficient algorithms without impacting the core State Connector voting protocol which always just votes on the root hash.","title":"Merkle-Tree Root Voting"},{"location":"technology/state-connector/#new-event-type-integrations","text":"New real-world event-type integrations are introduced to the State Connector via acceptance by the default attestation providers, and without requiring any changes to the core voting or branching protocols described above. This enables rapid deployment of new use-cases without any validator-level code changes.","title":"New Event-Type Integrations"},{"location":"tutorials/delegation/","text":"Delegation overview \u00b6 Any user holding SGB tokens can delegate its vote power to price providers in the Flare FTSO system. To learn more about the FTSO system please visit https://flare.xyz/ftso-a-breakdown/ . Price providers submit price signals to the Flare Time Series Oracle system (FTSO). Inflation is distributed to anyone participating in the FTSO, which includes price providers and any user delegating its vote power to the price providers. By participating, any SGB holder can earn a part of the distributed inflation. Each user can delegate its SGB vote power without a locking scheme. This means the user can earn rewards for their tokens without locking them, so he could still be using them for other purposes. To delegate SGB vote power one has to wrap them and mint wrapped SGB (WSGB). Once that is done the user will have the vote power that is equivalent to its WSGB balance. Then the user can delegate this vote power to one or two price providers. As long as this delegation is active the user will earn rewards which are aligned with its vote power and the performance of the chosen price provider/s. Those rewards accumulate in the reward manager and will become claimable for each reward epoch that is finalized.","title":"Delegation overview"},{"location":"tutorials/delegation/#delegation-overview","text":"Any user holding SGB tokens can delegate its vote power to price providers in the Flare FTSO system. To learn more about the FTSO system please visit https://flare.xyz/ftso-a-breakdown/ . Price providers submit price signals to the Flare Time Series Oracle system (FTSO). Inflation is distributed to anyone participating in the FTSO, which includes price providers and any user delegating its vote power to the price providers. By participating, any SGB holder can earn a part of the distributed inflation. Each user can delegate its SGB vote power without a locking scheme. This means the user can earn rewards for their tokens without locking them, so he could still be using them for other purposes. To delegate SGB vote power one has to wrap them and mint wrapped SGB (WSGB). Once that is done the user will have the vote power that is equivalent to its WSGB balance. Then the user can delegate this vote power to one or two price providers. As long as this delegation is active the user will earn rewards which are aligned with its vote power and the performance of the chosen price provider/s. Those rewards accumulate in the reward manager and will become claimable for each reward epoch that is finalized.","title":"Delegation overview"},{"location":"tutorials/delegation/delegation-in-detail/","text":"Delegation in detail \u00b6 Background \u00b6 The vote power token is the base contract for WSGB (wrapped native token) and later for fAssets, which are wrapped assets on flare. This token contract is built to enable delegation of vote power without locking the holder\u2019s token. It works by adding the vote power and delegation functions to the ERC20 token contract. Basically, balance represents vote power; with the additional code, a holder can delegate a percentage of its own vote power to another address and still use their tokens freely. The transfer/mint/burn functions will immediately update the actual vote power being held by the delegator and the vote power of the address it delegates to. All vote power data is being checkpointed by block. For any vote power update due to delegation, transfer, or otherwise, a checkpoint is added. For anyone familiar with the MiniMe token , the checkpoint mechanism is similar, while differing in that more data is being checkpointed. When a voting campaign occurs, a past block will be randomly chosen and all vote power data will be taken from this block. This would actually work like taking a vote power snapshot for a specific block and using that for all addresses voting (providing prices) in the campaign. The random process of choosing a block is designed to mitigate attacks such as flash-loan or short term loans. This token is named VPToken (vote power token). VPToken APIs \u00b6 ERC20 APIs. BalanceOfAt(address, block) , totalSupplyAt(block) as in MiniMe token. Delegation and vote power interfaces are described in IIVPToken interface file. Mint and burn APIs will be handled in the inheriting contracts. WNAT and later xAsset. Delegation \u00b6 Delegation enables a user to keep holding their balance (tokens) while delegating the vote power this balance represents. Two delegation methods are supported. The basic (normal) delegation is delegation by percentage , the other being explicit delegation . With percentage delegation, any address can delegate a percentage of its holding; this is limited to x addresses. Example: Alice has 20 tokens and delegates 50% to Bob, Bob will have additional vote power of 10 on the top of his own balance (own vote power). This means any transfer of tokens to or from Alice will update 50% of the delegated vote power to Bob. If Alice delegates to another address, each token transfer to or from Alice will update the vote power of those other addresses. This in turn will cause higher gas costs for transfer functions. To cap those extra costs, this delegation option has a limited number of delegation destinations. In the case that an address (user or contract) wishes to delegate vote power to more addresses, they have the option of the explicit delegation method . With explicit delegation , an explicit amount of vote power is delegated. While useful, this does create more complications for the user since the balance corresponding to the delegated vote power can\u2019t be transferred. For example, if Alice has 20 tokens and explicitly delegates vote power of 20 to Bob, the delegated balance is actually locked. Alice can\u2019t send out these tokens unless the 20 vote power is explicitly un-delegated. Another complication here is that for each new token received, a new delegate operation has to be performed; vote power will not be automatically delegated upon token reception. The explicit delegation method is built for advanced users or for contracts holding a large number of tokens for different users. Imagine a collateral contract holding many WSGB for many users. Each user depositing tokens might want to delegate to a different set of price providers. Explicit delegation will enable this contract to update the explicit delegation per user deposit and un-delegate every time a user wishes to withdraw its funds. Only one of the delegation methods can be used per address. Furthermore, an address can never change its delegation method. For example, if a user called delegate-explicit once from its address, they will never be able to do a percentage delegation with the same address. The delegation system will support: Delegation of vote power to several addresses Several addresses delegating to a single address 1 level delegation. If Alice delegates to Bob and Bob delegates to Charlie, Charlie will only get the delegated balance of Bob, and will not be affected by the delegation Alice did. Delegation units are the same as balance units. Check pointing historical data \u00b6 Token data regarding vote power, delegation, balance and supply is all checkpointed to allow the retrieval of historical values. Per change in any value, a checkpoint is added to the array which includes the updated value and the block number. When trying to read historical data, a binary search is performed on the array. With this, the data retrieval cost grows on a logarithmic scale. Vote power data \u00b6 The above delegation scheme creates a mapping from balance to vote power for each address. The vote power of each address reflects its own balance plus any delegated vote power from other addresses. Vote power should never be reused (double-spent): if vote power is delegated, the delegating address should not have this vote power under its own account. Voting campaigns using vote power token \u00b6 Checkpointed vote power data is used in voting campaigns (reward epochs). A voting campaign uses a randomly chosen block number from the past (vote power block). When an address (data provider) casts its vote for a specific campaign, its vote power is taken from the vote power block for this campaign. Hence, the vote power of an address for this campaign does not reflect its present balance and delegation but rather the state at the time of the snapshot (in the vote power block). This design allows for a free use of tokens (non-locked) and a consistent vote power snapshot of token holdings. Voting campaigns are a generic concept; in FTSO system, the vote power of price providers is used as an influence in choosing the \u201ccorrect price\u201d. Each price submission is weighted according to the vote power scheme described here. Vote power caching and the revoke feature \u00b6 Due to reward distribution constraints that are described in the reward manager specification, the same vote power block is used for a rather long period of time. This time frame will be named a \u201creward epoch\u201d which will include many short price epochs. Meaning, FTSO price feeds commencing over a period of a few days will continuously derive vote power from the same vote power block in the past. Usage of the same vote power block for many campaigns calls for a caching mechanism. The caching mechanism caches the vote power per address per block if done through a dedicated caching enabled function. For example, the normal vote power query function is votePowerOfAt(address, block) . This has a matching cache query: votePowerOfAtCache(address, block) which will also cache the data on its first usage for a specific address and block. Later calls to both of these functions will use the cached value if that exists. Revoke \u00b6 Due to the substantial length of time one past vote power block is used for price submissions, a revoke feature was added. This feature can be used in case any specific price provider is found trying to attack and skew the reported price of the FTSO (flare oracle). In this situation, we imagine an off chain process (e.g. twitter storm) calling users to revoke vote power from a specific price provider. The revoke will update the cached value of the vote power for the specific block which is being used for this reward epoch. So if a user revokes its vote power delegation on a specific block, checkpoints for the vote power will not be updated, only the cached vote power values will be zeroed Vote power delegation and rewarding delegators \u00b6 A large part of the native token inflation is distributed to participants in the FTSO price submission process. The reward won by a price provider is shared between the price provider and the vote power delegators to the price provider (more on that in the FTSO and reward manager docs). The VP token exposes APIs that enable delegators to see how much vote power was delegated to a price provider in any past block. To enable this, the delegation percentage data are checkpointed after every change. Using the combination of delegation percentage and historical balance, each user can accurately see and show how much vote power they delegated to any address in the past. This API is also used by the reward manager, when the reward sharing is calculated. For explicit delegation, historical data is limited. It would be quite costly to continuously update a list of independent explicit delegations. That being said, when rewards are claimed for addresses that used explicit delegation, the delegator must already know which data providers it delegated vote power to in the relevant block. To recap, historical delegation APIs exist. For percentage delegations, each address can determine the full list of addresses it delegated to in any block in history. For explicit delegations, a user must use their own methods to build the list of addresses it delegated to at specific times. After building this list, one can query how much vote power was delegated to each address. Two options for building this list would be: Saving this data in real time while delegating. Reading past delegation events for this address. Vote power block selection \u00b6 The vote power of each price provider is cached and only recalculated at the start of each reward epoch. The selected vote power block (snap shot block) for a new epoch is selected randomly once the reward epoch starts_._ It is selected randomly with uniform probability from the last quarter of mined blocks. This can roughly be approximated as taking the random block in the last quarter time-wise, but is not necessarily correct , as block mining density can change. Example: Reward epoch with index 10 started at block 2487672 with timestamp 1637397708 (Saturday, November 20, 2021 8:41:48 AM GMT) and lasted until block 3003881 with timestamp 1638002503 (Saturday, November 27, 2021 8:41:43 AM GMT). This means that 516209 blocks were mined in this epoch and the last quarter of the blocks started with the block number 2487672 + 516209 * 3 / 4 = 2874828 with timestamp 1637817710 (Thursday, November 25, 2021 5:21:50 AM GMT). Any block between 2874828 and 3003881 is therefore eligible for selection as the vote power block. In this reward epoch, block 2881097 with timestamp 1637825442 (Thursday, November 25, 2021 7:30:42 AM GMT) was selected. This is before the last quarter of the week (Thursday, November 25, 2021 2:41:33 PM GMT) if we were to take the timestamp measure.","title":"Delegation in detail"},{"location":"tutorials/delegation/delegation-in-detail/#delegation-in-detail","text":"","title":"Delegation in detail"},{"location":"tutorials/delegation/delegation-in-detail/#background","text":"The vote power token is the base contract for WSGB (wrapped native token) and later for fAssets, which are wrapped assets on flare. This token contract is built to enable delegation of vote power without locking the holder\u2019s token. It works by adding the vote power and delegation functions to the ERC20 token contract. Basically, balance represents vote power; with the additional code, a holder can delegate a percentage of its own vote power to another address and still use their tokens freely. The transfer/mint/burn functions will immediately update the actual vote power being held by the delegator and the vote power of the address it delegates to. All vote power data is being checkpointed by block. For any vote power update due to delegation, transfer, or otherwise, a checkpoint is added. For anyone familiar with the MiniMe token , the checkpoint mechanism is similar, while differing in that more data is being checkpointed. When a voting campaign occurs, a past block will be randomly chosen and all vote power data will be taken from this block. This would actually work like taking a vote power snapshot for a specific block and using that for all addresses voting (providing prices) in the campaign. The random process of choosing a block is designed to mitigate attacks such as flash-loan or short term loans. This token is named VPToken (vote power token).","title":"Background"},{"location":"tutorials/delegation/delegation-in-detail/#vptoken-apis","text":"ERC20 APIs. BalanceOfAt(address, block) , totalSupplyAt(block) as in MiniMe token. Delegation and vote power interfaces are described in IIVPToken interface file. Mint and burn APIs will be handled in the inheriting contracts. WNAT and later xAsset.","title":"VPToken APIs"},{"location":"tutorials/delegation/delegation-in-detail/#delegation","text":"Delegation enables a user to keep holding their balance (tokens) while delegating the vote power this balance represents. Two delegation methods are supported. The basic (normal) delegation is delegation by percentage , the other being explicit delegation . With percentage delegation, any address can delegate a percentage of its holding; this is limited to x addresses. Example: Alice has 20 tokens and delegates 50% to Bob, Bob will have additional vote power of 10 on the top of his own balance (own vote power). This means any transfer of tokens to or from Alice will update 50% of the delegated vote power to Bob. If Alice delegates to another address, each token transfer to or from Alice will update the vote power of those other addresses. This in turn will cause higher gas costs for transfer functions. To cap those extra costs, this delegation option has a limited number of delegation destinations. In the case that an address (user or contract) wishes to delegate vote power to more addresses, they have the option of the explicit delegation method . With explicit delegation , an explicit amount of vote power is delegated. While useful, this does create more complications for the user since the balance corresponding to the delegated vote power can\u2019t be transferred. For example, if Alice has 20 tokens and explicitly delegates vote power of 20 to Bob, the delegated balance is actually locked. Alice can\u2019t send out these tokens unless the 20 vote power is explicitly un-delegated. Another complication here is that for each new token received, a new delegate operation has to be performed; vote power will not be automatically delegated upon token reception. The explicit delegation method is built for advanced users or for contracts holding a large number of tokens for different users. Imagine a collateral contract holding many WSGB for many users. Each user depositing tokens might want to delegate to a different set of price providers. Explicit delegation will enable this contract to update the explicit delegation per user deposit and un-delegate every time a user wishes to withdraw its funds. Only one of the delegation methods can be used per address. Furthermore, an address can never change its delegation method. For example, if a user called delegate-explicit once from its address, they will never be able to do a percentage delegation with the same address. The delegation system will support: Delegation of vote power to several addresses Several addresses delegating to a single address 1 level delegation. If Alice delegates to Bob and Bob delegates to Charlie, Charlie will only get the delegated balance of Bob, and will not be affected by the delegation Alice did. Delegation units are the same as balance units.","title":"Delegation"},{"location":"tutorials/delegation/delegation-in-detail/#check-pointing-historical-data","text":"Token data regarding vote power, delegation, balance and supply is all checkpointed to allow the retrieval of historical values. Per change in any value, a checkpoint is added to the array which includes the updated value and the block number. When trying to read historical data, a binary search is performed on the array. With this, the data retrieval cost grows on a logarithmic scale.","title":"Check pointing historical data"},{"location":"tutorials/delegation/delegation-in-detail/#vote-power-data","text":"The above delegation scheme creates a mapping from balance to vote power for each address. The vote power of each address reflects its own balance plus any delegated vote power from other addresses. Vote power should never be reused (double-spent): if vote power is delegated, the delegating address should not have this vote power under its own account.","title":"Vote power data"},{"location":"tutorials/delegation/delegation-in-detail/#voting-campaigns-using-vote-power-token","text":"Checkpointed vote power data is used in voting campaigns (reward epochs). A voting campaign uses a randomly chosen block number from the past (vote power block). When an address (data provider) casts its vote for a specific campaign, its vote power is taken from the vote power block for this campaign. Hence, the vote power of an address for this campaign does not reflect its present balance and delegation but rather the state at the time of the snapshot (in the vote power block). This design allows for a free use of tokens (non-locked) and a consistent vote power snapshot of token holdings. Voting campaigns are a generic concept; in FTSO system, the vote power of price providers is used as an influence in choosing the \u201ccorrect price\u201d. Each price submission is weighted according to the vote power scheme described here.","title":"Voting campaigns using vote power token"},{"location":"tutorials/delegation/delegation-in-detail/#vote-power-caching-and-the-revoke-feature","text":"Due to reward distribution constraints that are described in the reward manager specification, the same vote power block is used for a rather long period of time. This time frame will be named a \u201creward epoch\u201d which will include many short price epochs. Meaning, FTSO price feeds commencing over a period of a few days will continuously derive vote power from the same vote power block in the past. Usage of the same vote power block for many campaigns calls for a caching mechanism. The caching mechanism caches the vote power per address per block if done through a dedicated caching enabled function. For example, the normal vote power query function is votePowerOfAt(address, block) . This has a matching cache query: votePowerOfAtCache(address, block) which will also cache the data on its first usage for a specific address and block. Later calls to both of these functions will use the cached value if that exists.","title":"Vote power caching and the revoke feature"},{"location":"tutorials/delegation/delegation-in-detail/#revoke","text":"Due to the substantial length of time one past vote power block is used for price submissions, a revoke feature was added. This feature can be used in case any specific price provider is found trying to attack and skew the reported price of the FTSO (flare oracle). In this situation, we imagine an off chain process (e.g. twitter storm) calling users to revoke vote power from a specific price provider. The revoke will update the cached value of the vote power for the specific block which is being used for this reward epoch. So if a user revokes its vote power delegation on a specific block, checkpoints for the vote power will not be updated, only the cached vote power values will be zeroed","title":"Revoke"},{"location":"tutorials/delegation/delegation-in-detail/#vote-power-delegation-and-rewarding-delegators","text":"A large part of the native token inflation is distributed to participants in the FTSO price submission process. The reward won by a price provider is shared between the price provider and the vote power delegators to the price provider (more on that in the FTSO and reward manager docs). The VP token exposes APIs that enable delegators to see how much vote power was delegated to a price provider in any past block. To enable this, the delegation percentage data are checkpointed after every change. Using the combination of delegation percentage and historical balance, each user can accurately see and show how much vote power they delegated to any address in the past. This API is also used by the reward manager, when the reward sharing is calculated. For explicit delegation, historical data is limited. It would be quite costly to continuously update a list of independent explicit delegations. That being said, when rewards are claimed for addresses that used explicit delegation, the delegator must already know which data providers it delegated vote power to in the relevant block. To recap, historical delegation APIs exist. For percentage delegations, each address can determine the full list of addresses it delegated to in any block in history. For explicit delegations, a user must use their own methods to build the list of addresses it delegated to at specific times. After building this list, one can query how much vote power was delegated to each address. Two options for building this list would be: Saving this data in real time while delegating. Reading past delegation events for this address.","title":"Vote power delegation and rewarding delegators"},{"location":"tutorials/delegation/delegation-in-detail/#vote-power-block-selection","text":"The vote power of each price provider is cached and only recalculated at the start of each reward epoch. The selected vote power block (snap shot block) for a new epoch is selected randomly once the reward epoch starts_._ It is selected randomly with uniform probability from the last quarter of mined blocks. This can roughly be approximated as taking the random block in the last quarter time-wise, but is not necessarily correct , as block mining density can change. Example: Reward epoch with index 10 started at block 2487672 with timestamp 1637397708 (Saturday, November 20, 2021 8:41:48 AM GMT) and lasted until block 3003881 with timestamp 1638002503 (Saturday, November 27, 2021 8:41:43 AM GMT). This means that 516209 blocks were mined in this epoch and the last quarter of the blocks started with the block number 2487672 + 516209 * 3 / 4 = 2874828 with timestamp 1637817710 (Thursday, November 25, 2021 5:21:50 AM GMT). Any block between 2874828 and 3003881 is therefore eligible for selection as the vote power block. In this reward epoch, block 2881097 with timestamp 1637825442 (Thursday, November 25, 2021 7:30:42 AM GMT) was selected. This is before the last quarter of the week (Thursday, November 25, 2021 2:41:33 PM GMT) if we were to take the timestamp measure.","title":"Vote power block selection"},{"location":"tutorials/delegation-faq/","text":"Delegation FAQ \u00b6 Why should I delegate? \u00b6 When delegating your vote power, you can earn rewards, but even more important one can support reliable price providers which in turn will strengthen the stability of the FTSO and the whole ecosystem. Can I still use my tokens after delegating my vote power? \u00b6 Yes. The tokens are never locked and can be used for any purpose: send, deposit etc. Do I lose ownership of my tokens when delegating my vote power? \u00b6 No, delegation never requires giving up ownership of your tokens. What is the first step for delegating my vote power? \u00b6 The first step is to wrap your SGB and create WSGB. WSGB has 1:1 conversion to SGB, it is a fundamental step for enabling a user to delegate his vote power. How do I wrap my SGB tokens? \u00b6 The actual wrapping will be done differently depending on the wallet you are using. See wallets section for more details. How much SGB should I wrap? \u00b6 Note that gas can't be paid with wSGB. Always make sure not to wrap your full SGB holdings, but rather keep some SGB unwrapped for paying gas fees with your account. How do I delegate my WSGB vote power? \u00b6 wSGB. Delegation is done differently, depending on the wallet you use. See wallets section for more details. How much vote power should I delegate? \u00b6 Once you own WSGB, it is best to delegate 100% of your vote power. To whom should I delegate my vote power? \u00b6 For the ongoing stability of the FTSO it is highly recommended to delegate to reliable price providers. Ones that are committed to providing accurate price feeds. One should also consider the expected reward rate each price provider can offer. How many price providers can I delegate to? \u00b6 Each user can delegate to one or two price providers. Should I delegate to one or two price providers? \u00b6 For an account with lower SGB balance (~ 500) it is better to delegate to 1 price provider, since the gas amount when claiming for two providers is a bit higher, if you have a larger account, consider delegating to two price providers. When I send or receive tokens is my delegation data automatically updated? \u00b6 Yes, if a user is using delegation by percentage, which means any WSGB that is newly wrapped, sent or received will automatically update the actual delegated vote power. If on the other hand you receive SGB tokens, you have to first wrap them to WSGB to be able to contribute to existing delegations. What if I want to update my delegations? \u00b6 For updating delegation data the total percentage should always be equal to or smaller than 100%. So if you want to reduce some percentage from one price provider and increase for the other, you should first decrease the percentage from one price provider. When is my delegation reflected? \u00b6 Your delegation is reflected if it happens before a vote power snapshot is done for a reward epoch. Any delegation done after the snapshot block will only be reflected in the next reward epoch. See the reward section for more details. Do claimed, wrapped and delegated SGB become immediately effective in the ongoing reward epoch? \u00b6 No. In general they start becoming effective for rewards in the next reward epoch, that is assuming wrapping and delegation were carried out before the vote power snapshot block. When is the snapshot vote power taken for a reward epoch? \u00b6 A vote power block snapshot for current reward epoch is selected randomly and retroactively at the beginning of a new epoch. It is selected from the last quarter of the previous reward epoch (in terms of blocks produced in the previous reward epoch). Why should I avoid delegating in the last quarter of the current reward epoch? \u00b6 Your delegation might be too late for consideration in the next reward epoch since the vote power block for the next reward epoch will be randomly chosen from the blocks in the last quarter of the current epoch. How much reward can each price provider earn for me? This depends on a few factors: The delegated balance. The price provider reward rate. The price provider fee. How much fee does the price provider take from addresses delegating to it. The amount of vote power already delegated to this price provider. To encourage decentralization, there is a vote power cap and any excess vote power is not counted during the median calculation and rewarding phase. If there is over delegation, the same amount of rewards is split between more delegators. Where can I see the expected rewards from a price provider? \u00b6 Each price provider has different performance that results in different reward rates. Sources for this data can be found on the web. Note the reward rate might be changing per each week. Try googling 'Flare metrics'.","title":"Delegation FAQ"},{"location":"tutorials/delegation-faq/#delegation-faq","text":"","title":"Delegation FAQ"},{"location":"tutorials/delegation-faq/#why-should-i-delegate","text":"When delegating your vote power, you can earn rewards, but even more important one can support reliable price providers which in turn will strengthen the stability of the FTSO and the whole ecosystem.","title":"Why should I delegate?"},{"location":"tutorials/delegation-faq/#can-i-still-use-my-tokens-after-delegating-my-vote-power","text":"Yes. The tokens are never locked and can be used for any purpose: send, deposit etc.","title":"Can I still use my tokens after delegating my vote power?"},{"location":"tutorials/delegation-faq/#do-i-lose-ownership-of-my-tokens-when-delegating-my-vote-power","text":"No, delegation never requires giving up ownership of your tokens.","title":"Do I lose ownership of my tokens when delegating my vote power?"},{"location":"tutorials/delegation-faq/#what-is-the-first-step-for-delegating-my-vote-power","text":"The first step is to wrap your SGB and create WSGB. WSGB has 1:1 conversion to SGB, it is a fundamental step for enabling a user to delegate his vote power.","title":"What is the first step for delegating my vote power?"},{"location":"tutorials/delegation-faq/#how-do-i-wrap-my-sgb-tokens","text":"The actual wrapping will be done differently depending on the wallet you are using. See wallets section for more details.","title":"How do I wrap my SGB tokens?"},{"location":"tutorials/delegation-faq/#how-much-sgb-should-i-wrap","text":"Note that gas can't be paid with wSGB. Always make sure not to wrap your full SGB holdings, but rather keep some SGB unwrapped for paying gas fees with your account.","title":"How much SGB should I wrap?"},{"location":"tutorials/delegation-faq/#how-do-i-delegate-my-wsgb-vote-power","text":"wSGB. Delegation is done differently, depending on the wallet you use. See wallets section for more details.","title":"How do I delegate my WSGB vote power?"},{"location":"tutorials/delegation-faq/#how-much-vote-power-should-i-delegate","text":"Once you own WSGB, it is best to delegate 100% of your vote power.","title":"How much vote power should I delegate?"},{"location":"tutorials/delegation-faq/#to-whom-should-i-delegate-my-vote-power","text":"For the ongoing stability of the FTSO it is highly recommended to delegate to reliable price providers. Ones that are committed to providing accurate price feeds. One should also consider the expected reward rate each price provider can offer.","title":"To whom should I delegate my vote power?"},{"location":"tutorials/delegation-faq/#how-many-price-providers-can-i-delegate-to","text":"Each user can delegate to one or two price providers.","title":"How many price providers can I delegate to?"},{"location":"tutorials/delegation-faq/#should-i-delegate-to-one-or-two-price-providers","text":"For an account with lower SGB balance (~ 500) it is better to delegate to 1 price provider, since the gas amount when claiming for two providers is a bit higher, if you have a larger account, consider delegating to two price providers.","title":"Should I delegate to one or two price providers?"},{"location":"tutorials/delegation-faq/#when-i-send-or-receive-tokens-is-my-delegation-data-automatically-updated","text":"Yes, if a user is using delegation by percentage, which means any WSGB that is newly wrapped, sent or received will automatically update the actual delegated vote power. If on the other hand you receive SGB tokens, you have to first wrap them to WSGB to be able to contribute to existing delegations.","title":"When I send or receive tokens is my delegation data automatically updated?"},{"location":"tutorials/delegation-faq/#what-if-i-want-to-update-my-delegations","text":"For updating delegation data the total percentage should always be equal to or smaller than 100%. So if you want to reduce some percentage from one price provider and increase for the other, you should first decrease the percentage from one price provider.","title":"What if I want to update my delegations?"},{"location":"tutorials/delegation-faq/#when-is-my-delegation-reflected","text":"Your delegation is reflected if it happens before a vote power snapshot is done for a reward epoch. Any delegation done after the snapshot block will only be reflected in the next reward epoch. See the reward section for more details.","title":"When is my delegation reflected?"},{"location":"tutorials/delegation-faq/#do-claimed-wrapped-and-delegated-sgb-become-immediately-effective-in-the-ongoing-reward-epoch","text":"No. In general they start becoming effective for rewards in the next reward epoch, that is assuming wrapping and delegation were carried out before the vote power snapshot block.","title":"Do claimed, wrapped and delegated SGB become immediately effective in the ongoing reward epoch?"},{"location":"tutorials/delegation-faq/#when-is-the-snapshot-vote-power-taken-for-a-reward-epoch","text":"A vote power block snapshot for current reward epoch is selected randomly and retroactively at the beginning of a new epoch. It is selected from the last quarter of the previous reward epoch (in terms of blocks produced in the previous reward epoch).","title":"When is the snapshot vote power taken for a reward epoch?"},{"location":"tutorials/delegation-faq/#why-should-i-avoid-delegating-in-the-last-quarter-of-the-current-reward-epoch","text":"Your delegation might be too late for consideration in the next reward epoch since the vote power block for the next reward epoch will be randomly chosen from the blocks in the last quarter of the current epoch. How much reward can each price provider earn for me? This depends on a few factors: The delegated balance. The price provider reward rate. The price provider fee. How much fee does the price provider take from addresses delegating to it. The amount of vote power already delegated to this price provider. To encourage decentralization, there is a vote power cap and any excess vote power is not counted during the median calculation and rewarding phase. If there is over delegation, the same amount of rewards is split between more delegators.","title":"Why should I avoid delegating in the last quarter of the current reward epoch?"},{"location":"tutorials/delegation-faq/#where-can-i-see-the-expected-rewards-from-a-price-provider","text":"Each price provider has different performance that results in different reward rates. Sources for this data can be found on the web. Note the reward rate might be changing per each week. Try googling 'Flare metrics'.","title":"Where can I see the expected rewards from a price provider?"},{"location":"tutorials/delegation-faq/block-explorer-%2B-metamask/","text":"Block explorer + metamask FAQ \u00b6 Congratulations on taking this more technical approach, it will enable you to better understand the system. How to find the address of my chosen price provider? \u00b6 Google 'Flare metrics' and in that website, one can press on ones chosen price provider and find the 'songbird address' which should look something like: 0xbf61db1cdb43d196309824473fa82e5b17581159 . When browsing such an address in the block explorer you should see that every few minutes it is submitting a transaction named: SubmitPriceHashes or RevealPrices . Where can I find the delegation API \u00b6 The delegation API can be found in the WNAT contract here https://songbird-explorer.flare.network/address/0x02f0826ef6aD107Cfc861152B32B52fD11BaB9ED/write-contract in function no. 5 delegate . What values to use in the delegation API? \u00b6 The API for delegation is: delegate(_to address, bips) , where bips is the percentage in basis points. 10000 bips = 100% and 5000 bips = 50%. If one wants to delegate 100% of his vote power to the price provider in address: 0xbf61db1cdb43d196309824473fa82e5b17581159 the call should look like: delegate(0xbf61db1cdb43d196309824473fa82e5b1758115, 10000) . How do I remove my delegation from a price provider? \u00b6 For removing a delegation you should delegate 0% to the price provider you want to remove delegations from. What is the easiest way to redelegate my vote power? \u00b6 It is probably easiest to first use undelegateAll() API - see No. 25 in the wNat contract here https://songbird-explorer.flare.network/address/0x02f0826ef6aD107Cfc861152B32B52fD11BaB9ED/write-contract/ and then delegate to your chosen price provider/s.","title":"Block explorer + metamask FAQ"},{"location":"tutorials/delegation-faq/block-explorer-%2B-metamask/#block-explorer-metamask-faq","text":"Congratulations on taking this more technical approach, it will enable you to better understand the system.","title":"Block explorer + metamask FAQ"},{"location":"tutorials/delegation-faq/block-explorer-%2B-metamask/#how-to-find-the-address-of-my-chosen-price-provider","text":"Google 'Flare metrics' and in that website, one can press on ones chosen price provider and find the 'songbird address' which should look something like: 0xbf61db1cdb43d196309824473fa82e5b17581159 . When browsing such an address in the block explorer you should see that every few minutes it is submitting a transaction named: SubmitPriceHashes or RevealPrices .","title":"How to find the address of my chosen price provider?"},{"location":"tutorials/delegation-faq/block-explorer-%2B-metamask/#where-can-i-find-the-delegation-api","text":"The delegation API can be found in the WNAT contract here https://songbird-explorer.flare.network/address/0x02f0826ef6aD107Cfc861152B32B52fD11BaB9ED/write-contract in function no. 5 delegate .","title":"Where can I find the delegation API"},{"location":"tutorials/delegation-faq/block-explorer-%2B-metamask/#what-values-to-use-in-the-delegation-api","text":"The API for delegation is: delegate(_to address, bips) , where bips is the percentage in basis points. 10000 bips = 100% and 5000 bips = 50%. If one wants to delegate 100% of his vote power to the price provider in address: 0xbf61db1cdb43d196309824473fa82e5b17581159 the call should look like: delegate(0xbf61db1cdb43d196309824473fa82e5b1758115, 10000) .","title":"What values to use in the delegation API?"},{"location":"tutorials/delegation-faq/block-explorer-%2B-metamask/#how-do-i-remove-my-delegation-from-a-price-provider","text":"For removing a delegation you should delegate 0% to the price provider you want to remove delegations from.","title":"How do I remove my delegation from a price provider?"},{"location":"tutorials/delegation-faq/block-explorer-%2B-metamask/#what-is-the-easiest-way-to-redelegate-my-vote-power","text":"It is probably easiest to first use undelegateAll() API - see No. 25 in the wNat contract here https://songbird-explorer.flare.network/address/0x02f0826ef6aD107Cfc861152B32B52fD11BaB9ED/write-contract/ and then delegate to your chosen price provider/s.","title":"What is the easiest way to redelegate my vote power?"},{"location":"tutorials/developing-on-top-of-flare/","text":"Developing on top of Flare FAQ \u00b6 Flare and EVM \u00b6 Songbird (later Flare) network runs the Ethereum EVM. Which means Ethereum contracts and tools can be used to develop on top of these chains. Both networks are layer 1 networks, and are running independent of main-net Ethereum. Check network documentation and whitepaper for more info. All existing tools and technologies available for Ethereum can be leveraged on Songbird network. The main infrastructure (FTSO, state connectors, fAssets) is written in Solidity using standard tools: ethers, web3, hardhat. State of the network can be observed using a block explorer, Metamask and a few other wallets wallets . FAQ \u00b6 How can I interact with the Songbird network \u00b6 You can interact with Songbird network through: the block explorer , Metamask or other wallets , local development tools such as hardhat . Connection configuration for Songbird is described in the Networks section . Does Songbird support Ethereum-style contracts? \u00b6 Ethereum style contracts are supported by Songbird. Does Songbird support NFTs? \u00b6 Songbird network supports NFTs and many were already created on Songbird. The Blockscout explorer supports displaying NFTs. How to verify if a transaction is finalized using web3? \u00b6 On Songbird network obtaining the receipt of a submitted transaction does not guarantee that the transaction is finalized. One has to wait until the sender's account nonce increases. Here is an example of a helper function with exponential backoff that can be used to send signed transactions and wait for finalization. async function sendAndFinalize ( senderAddress , signedTx , delay = 1000 ) { let oldNonce = await web3 . eth . getTransactionCount ( senderAddress ); let receipt = await sendSignedTransaction ( signedTx . rawTransaction ) let backoff = 1.5 ; let maxRetries = 8 ; while (( await web3 . eth . getTransactionCount ( senderAddress )) == oldNonce ) { await new Promise (( resolve ) => { setTimeout (()=>{ resolve ()}, delay )}) maxRetries -- ; if ( maxRetries == 0 ) { throw new Error ( \"Response timeout\" ); } delay = Math . floor ( delay * backoff ); } return receipt ; } How to obtain a revert reason for a reverting contract call (web3)? \u00b6 In order to obtain the revert message of a reverted contract call transaction one has to follow the following steps: Catch the exception, and verify, if the revert reason is a part of the exception data. if not: Repeat the same contract call while using .call(...) syntax and parse the revert reason. Note that repeating the same call with the .call() method is better done quickly, to assure that the chain has a similar state for both calls. Is there a code example for reading the revert reason? \u00b6 Below is a generic helper function to demonstrate this. Note that it relies on the function sendAndFinalize (see one of the previous answers above). async contractCall ( account , from , to , gas , gasPrice , fnToEncode , nonce ) { let tx = { from , to , gas , gasPrice , data : fnToEncode . encodeABI (), nonce }; let signedTx = await account . signTransaction ( tx ); try { return await sendSignedTransaction ( signedTx . rawTransaction ); } catch ( e ) { if ( e . message . indexOf ( \"Transaction has been reverted by the EVM\" ) < 0 ) { throw new Error ( e . message ); } else { // throws Exception with revert message await fnToEncode . call ({ from : account . address }) throw Error ( 'unlikely to happen: ' + JSON . stringify ( result )) } } } Here account and fnToEncode are obtained, for example, as follows: let account = web3 . eth . accounts . privateKeyToAccount ( privateKey ) let fnToEncode = web3Contract . methods . someMethodOnContract ( param1 , param2 ) How to reliably read events with web3? \u00b6 Subscription to events, for example using listeners in ethers library, proved to be unreliable, especially when higher traffic exists on the network. To reliably read events it is recommended to use getPastEvents function on web3 contracts. This function has parameters fromBlock and toBlock . User has to track for which blocks the information was obtained and for which not. The number of blocks the user can specify in one web3 RPC call depends on the configuration of the RPC (network) node being used. In particular, if while running a node environment variable WEB3_API is set to debug (so called full node) usually 100 blocks of events can be read from the node through RPC call, while if WEB3_API=enabled (light node) only 1 block of events can be read.","title":"Developing on top of Flare FAQ"},{"location":"tutorials/developing-on-top-of-flare/#developing-on-top-of-flare-faq","text":"","title":"Developing on top of Flare FAQ"},{"location":"tutorials/developing-on-top-of-flare/#flare-and-evm","text":"Songbird (later Flare) network runs the Ethereum EVM. Which means Ethereum contracts and tools can be used to develop on top of these chains. Both networks are layer 1 networks, and are running independent of main-net Ethereum. Check network documentation and whitepaper for more info. All existing tools and technologies available for Ethereum can be leveraged on Songbird network. The main infrastructure (FTSO, state connectors, fAssets) is written in Solidity using standard tools: ethers, web3, hardhat. State of the network can be observed using a block explorer, Metamask and a few other wallets wallets .","title":"Flare and EVM"},{"location":"tutorials/developing-on-top-of-flare/#faq","text":"","title":"FAQ "},{"location":"tutorials/developing-on-top-of-flare/#how-can-i-interact-with-the-songbird-network","text":"You can interact with Songbird network through: the block explorer , Metamask or other wallets , local development tools such as hardhat . Connection configuration for Songbird is described in the Networks section .","title":"How can I interact with the Songbird network"},{"location":"tutorials/developing-on-top-of-flare/#does-songbird-support-ethereum-style-contracts","text":"Ethereum style contracts are supported by Songbird.","title":"Does Songbird support Ethereum-style contracts?"},{"location":"tutorials/developing-on-top-of-flare/#does-songbird-support-nfts","text":"Songbird network supports NFTs and many were already created on Songbird. The Blockscout explorer supports displaying NFTs.","title":"Does Songbird support NFTs?"},{"location":"tutorials/developing-on-top-of-flare/#how-to-verify-if-a-transaction-is-finalized-using-web3","text":"On Songbird network obtaining the receipt of a submitted transaction does not guarantee that the transaction is finalized. One has to wait until the sender's account nonce increases. Here is an example of a helper function with exponential backoff that can be used to send signed transactions and wait for finalization. async function sendAndFinalize ( senderAddress , signedTx , delay = 1000 ) { let oldNonce = await web3 . eth . getTransactionCount ( senderAddress ); let receipt = await sendSignedTransaction ( signedTx . rawTransaction ) let backoff = 1.5 ; let maxRetries = 8 ; while (( await web3 . eth . getTransactionCount ( senderAddress )) == oldNonce ) { await new Promise (( resolve ) => { setTimeout (()=>{ resolve ()}, delay )}) maxRetries -- ; if ( maxRetries == 0 ) { throw new Error ( \"Response timeout\" ); } delay = Math . floor ( delay * backoff ); } return receipt ; }","title":"How to verify if a transaction is finalized using web3?"},{"location":"tutorials/developing-on-top-of-flare/#how-to-obtain-a-revert-reason-for-a-reverting-contract-call-web3","text":"In order to obtain the revert message of a reverted contract call transaction one has to follow the following steps: Catch the exception, and verify, if the revert reason is a part of the exception data. if not: Repeat the same contract call while using .call(...) syntax and parse the revert reason. Note that repeating the same call with the .call() method is better done quickly, to assure that the chain has a similar state for both calls.","title":"How to obtain a revert reason for a reverting contract call (web3)?"},{"location":"tutorials/developing-on-top-of-flare/#is-there-a-code-example-for-reading-the-revert-reason","text":"Below is a generic helper function to demonstrate this. Note that it relies on the function sendAndFinalize (see one of the previous answers above). async contractCall ( account , from , to , gas , gasPrice , fnToEncode , nonce ) { let tx = { from , to , gas , gasPrice , data : fnToEncode . encodeABI (), nonce }; let signedTx = await account . signTransaction ( tx ); try { return await sendSignedTransaction ( signedTx . rawTransaction ); } catch ( e ) { if ( e . message . indexOf ( \"Transaction has been reverted by the EVM\" ) < 0 ) { throw new Error ( e . message ); } else { // throws Exception with revert message await fnToEncode . call ({ from : account . address }) throw Error ( 'unlikely to happen: ' + JSON . stringify ( result )) } } } Here account and fnToEncode are obtained, for example, as follows: let account = web3 . eth . accounts . privateKeyToAccount ( privateKey ) let fnToEncode = web3Contract . methods . someMethodOnContract ( param1 , param2 )","title":"Is there a code example for reading the revert reason?"},{"location":"tutorials/developing-on-top-of-flare/#how-to-reliably-read-events-with-web3","text":"Subscription to events, for example using listeners in ethers library, proved to be unreliable, especially when higher traffic exists on the network. To reliably read events it is recommended to use getPastEvents function on web3 contracts. This function has parameters fromBlock and toBlock . User has to track for which blocks the information was obtained and for which not. The number of blocks the user can specify in one web3 RPC call depends on the configuration of the RPC (network) node being used. In particular, if while running a node environment variable WEB3_API is set to debug (so called full node) usually 100 blocks of events can be read from the node through RPC call, while if WEB3_API=enabled (light node) only 1 block of events can be read.","title":"How to reliably read events with web3?"},{"location":"tutorials/developing-on-top-of-flare/important-links/","text":"Important links \u00b6 Main smart contracts repo: https://gitlab.com/flarenetwork/flare-smart-contracts Kickoff price provider package: https://www.npmjs.com/package/@flarenetwork/ftso_price_provider_kick_off_package Price provider reference implementation: https://github.com/flare-foundation/FTSO-price-provider Blockscout explorer: https://songbird-explorer.flare.network/ Flare node repository: https://gitlab.com/flarenetwork/flare Discord: https://discord.com/invite/XqNa7Rq","title":"Important links"},{"location":"tutorials/developing-on-top-of-flare/important-links/#important-links","text":"Main smart contracts repo: https://gitlab.com/flarenetwork/flare-smart-contracts Kickoff price provider package: https://www.npmjs.com/package/@flarenetwork/ftso_price_provider_kick_off_package Price provider reference implementation: https://github.com/flare-foundation/FTSO-price-provider Blockscout explorer: https://songbird-explorer.flare.network/ Flare node repository: https://gitlab.com/flarenetwork/flare Discord: https://discord.com/invite/XqNa7Rq","title":"Important links"},{"location":"tutorials/explorer/coston-explorer/","text":"Coston Explorer \u00b6 The Coston Explorer is a fork of Blockscout that has been adapted to the Coston Network. The current release version is 4.0.0-beta: Blockscout 4.0.0-beta Here is a link to the docs: Blockscout Docs API access to the Coston Explorer is enabled for non-commercial use only: API Docs Please also see here for API examples available: API Examples Please make sure to follow the ERC-1155 standard to display NFTs correctly in the explorer, please see this specification, with extra focus on the metadata section: ERC-1155 Metadata","title":"Coston Explorer"},{"location":"tutorials/explorer/coston-explorer/#coston-explorer","text":"The Coston Explorer is a fork of Blockscout that has been adapted to the Coston Network. The current release version is 4.0.0-beta: Blockscout 4.0.0-beta Here is a link to the docs: Blockscout Docs API access to the Coston Explorer is enabled for non-commercial use only: API Docs Please also see here for API examples available: API Examples Please make sure to follow the ERC-1155 standard to display NFTs correctly in the explorer, please see this specification, with extra focus on the metadata section: ERC-1155 Metadata","title":"Coston Explorer"},{"location":"tutorials/explorer/songbird-explorer/","text":"Songbird Explorer \u00b6 The Songbird Explorer is a fork of Blockscout that has been adapted to the Songbird Network. The current release version is 4.0.0-beta: Blockscout 4.0.0-beta Here is a link to the docs: Blockscout Docs API access to the Songbird Explorer is enabled for non-commercial use only: API Docs Please also see here for API examples available: API Examples Please make sure to follow the ERC-1155 standard to display NFTs correctly in the explorer, please see this specification, with extra focus on the metadata section: ERC-1155 Metadata","title":"Songbird Explorer"},{"location":"tutorials/explorer/songbird-explorer/#songbird-explorer","text":"The Songbird Explorer is a fork of Blockscout that has been adapted to the Songbird Network. The current release version is 4.0.0-beta: Blockscout 4.0.0-beta Here is a link to the docs: Blockscout Docs API access to the Songbird Explorer is enabled for non-commercial use only: API Docs Please also see here for API examples available: API Examples Please make sure to follow the ERC-1155 standard to display NFTs correctly in the explorer, please see this specification, with extra focus on the metadata section: ERC-1155 Metadata","title":"Songbird Explorer"},{"location":"tutorials/price-provider/whitelisting/","text":"Whitelisting \u00b6 As a price provider, there are two separate whitelisting processes: Whitelisting your observation node with the flare team. See more in setting-up-an-observation-node Whitelisting your price provider, which is a fully decentralized process detailed in ftso-price-provider","title":"Whitelisting"},{"location":"tutorials/price-provider/whitelisting/#whitelisting","text":"As a price provider, there are two separate whitelisting processes: Whitelisting your observation node with the flare team. See more in setting-up-an-observation-node Whitelisting your price provider, which is a fully decentralized process detailed in ftso-price-provider","title":"Whitelisting"},{"location":"tutorials/price-provider/ftso-price-provider/","text":"FTSO Price Provider \u00b6 Background \u00b6 Providing prices to the FTSO system makes you a part of a decentralized oracle system. FTSO price providers submit prices to on chain contracts deployed on the Songbird network. The main contracts a price provider will interact with are the price Submitter and the FTSO contracts. All the relevant contracts for the FTSO system are available on the smart contract repo, see the important-links.md section. These contracts are deployed and verified on the songbird explorer . Perquisites \u00b6 For operating a price provider. You will have to be familiar with: smart contracts and Solidity. interacting with smart contract using a web3 library. hardhat runtime environment. First steps \u00b6 To facilitate an easier start, one can use the kick-off NPM package which is referenced here . This package showcases the main contracts related to whitelisting a price provider and submitting prices. The package enables you to deploy FTSO mock contracts in a local setup, and submit prices to those contracts. Working with the package should help all setup stages for your price provider. Working with this package package is mostly identical to providing on chain prices. Below aspects would be the same as working on chain: smart contract APIs (called functions) events. timing aspects are similar but not identical. The package does not cover the actual price calculation (weighted median) and rewarding as they occur on the real network. Please visit the important-links.md to find a link to a reference implementation of a price provider. You can find useful ideas in this code that will help you interact with the FTSO contracts and the Flare chain. Do note you will have to do some work on top of this implementation if you would like to win rewards. Providing Random numbers \u00b6 The price providing process is structured as a commit/reveal scheme to prevent users from copying submission data. The commit and reveal phases have strict time windows of a few minutes. With each reveal the price provider is also providing a random number. The random number is used as a salt in the reveal-commit scheme and later used in the reward calculation process. Price providers are encouraged to provide strong cryptographically secure random numbers with high entropy and sufficient range. Strong random numbers are important for network security since this is the only true source of randomness on the network. Random also makes the commit-reveal scheme resilient to attacks. Keep in mind that you submit 10 randoms every 3 minutes so random numbers with a maximal range less than 1_000_000_000 are not considered strong. The future versions of FTSO-s will support a system to reject submissions with weak random numbers. Going live \u00b6 Once you feel comfortable with the local NPM package you are ready to start submitting your prices on chain. For running on the real network you will have to face some new challenges: Gain vote power - A price provider can only whitelist himself as a provider if they have enough vote power. Observation node - It is recommended that each price provider runs an observation node. Timing issues - you will face to challenges: Align with the on chain time data - the on chain time stamp might skew up to 30-40 seconds from the real world time. Figure out when to submit your price data. If you submit too late, the Tx might not get included, if submitting too early the price data might not be accurate enough. Claim rewards. Be sure to claim your reward regularly and wrap them so more vote power is gained. Notes \u00b6 On the real network PriceSubmitter is deployed at a fixed address 0x1000000000000000000000000000000000000003 .","title":"FTSO Price Provider"},{"location":"tutorials/price-provider/ftso-price-provider/#ftso-price-provider","text":"","title":"FTSO Price Provider"},{"location":"tutorials/price-provider/ftso-price-provider/#background","text":"Providing prices to the FTSO system makes you a part of a decentralized oracle system. FTSO price providers submit prices to on chain contracts deployed on the Songbird network. The main contracts a price provider will interact with are the price Submitter and the FTSO contracts. All the relevant contracts for the FTSO system are available on the smart contract repo, see the important-links.md section. These contracts are deployed and verified on the songbird explorer .","title":"Background"},{"location":"tutorials/price-provider/ftso-price-provider/#perquisites","text":"For operating a price provider. You will have to be familiar with: smart contracts and Solidity. interacting with smart contract using a web3 library. hardhat runtime environment.","title":"Perquisites"},{"location":"tutorials/price-provider/ftso-price-provider/#first-steps","text":"To facilitate an easier start, one can use the kick-off NPM package which is referenced here . This package showcases the main contracts related to whitelisting a price provider and submitting prices. The package enables you to deploy FTSO mock contracts in a local setup, and submit prices to those contracts. Working with the package should help all setup stages for your price provider. Working with this package package is mostly identical to providing on chain prices. Below aspects would be the same as working on chain: smart contract APIs (called functions) events. timing aspects are similar but not identical. The package does not cover the actual price calculation (weighted median) and rewarding as they occur on the real network. Please visit the important-links.md to find a link to a reference implementation of a price provider. You can find useful ideas in this code that will help you interact with the FTSO contracts and the Flare chain. Do note you will have to do some work on top of this implementation if you would like to win rewards.","title":"First steps"},{"location":"tutorials/price-provider/ftso-price-provider/#providing-random-numbers","text":"The price providing process is structured as a commit/reveal scheme to prevent users from copying submission data. The commit and reveal phases have strict time windows of a few minutes. With each reveal the price provider is also providing a random number. The random number is used as a salt in the reveal-commit scheme and later used in the reward calculation process. Price providers are encouraged to provide strong cryptographically secure random numbers with high entropy and sufficient range. Strong random numbers are important for network security since this is the only true source of randomness on the network. Random also makes the commit-reveal scheme resilient to attacks. Keep in mind that you submit 10 randoms every 3 minutes so random numbers with a maximal range less than 1_000_000_000 are not considered strong. The future versions of FTSO-s will support a system to reject submissions with weak random numbers.","title":"Providing Random numbers"},{"location":"tutorials/price-provider/ftso-price-provider/#going-live","text":"Once you feel comfortable with the local NPM package you are ready to start submitting your prices on chain. For running on the real network you will have to face some new challenges: Gain vote power - A price provider can only whitelist himself as a provider if they have enough vote power. Observation node - It is recommended that each price provider runs an observation node. Timing issues - you will face to challenges: Align with the on chain time data - the on chain time stamp might skew up to 30-40 seconds from the real world time. Figure out when to submit your price data. If you submit too late, the Tx might not get included, if submitting too early the price data might not be accurate enough. Claim rewards. Be sure to claim your reward regularly and wrap them so more vote power is gained.","title":"Going live"},{"location":"tutorials/price-provider/ftso-price-provider/#notes","text":"On the real network PriceSubmitter is deployed at a fixed address 0x1000000000000000000000000000000000000003 .","title":"Notes"},{"location":"tutorials/price-provider/ftso-price-provider/price-provider-faq/","text":"Price Provider FAQ \u00b6 What can I do to generate strong random numbers? \u00b6 Use already available random number generators that provide a cryptographically secure (pseudo) random number generator. One good example would be the csprng library for nodejs applications. Keep in mind that you can submit randoms with 256 bits so try to use all the bits for entropy. Strong random numbers can also be generated by using Web3 utils: web3.utils.toBN(web3.utils.randomHex(32)) Where can I find the contracts I need to interact with as a price provider? \u00b6 The PriceSubmitter contract is deployed at a fixed address : 0x1000000000000000000000000000000000000003 . All the other contracts are available as read methods on the PriceSubmitter contract. You should periodically check for updates to have up to date information. Any important updates and contract changes will be broadcasted to the community. Where can I browse the source code and documentation for contracts? \u00b6 All the important contracts are verified on the blockscout explorer. The main smart contract repo is referenced here important-links.md . What are the important contracts I need to be aware of to be a price provider? \u00b6 The most important is the PriceSubmitter where you submit prices. It also has links to the below contracts. FtsoRegistry : Holds information about specific FTSOs, their symbols, indices and addresses. FTSOManager : Holds epoch and voting related configuration data and oversees all FTSOs, also gives access to additional useful contracts such as Inflation and Supply contracts. VoterWhitelister : The contract where a price provider list themselves to submit prices. How much does it cost to submit prices as price provider? \u00b6 Price submissions and reveals are currently discounted and it costs approximately 3-4 SGB per day if all the submission and reveal transactions are successful. Where can I see for which FTSOs I am eligible to submit prices? \u00b6 Each address is whitelisted separately for each FTSO contract. There are two ways to query whitelisting data, one through the VoterWhitelister contract, the other through the PriceSubmitter contract. How to read whitelisted addresses using the VoterWhitelister contract? \u00b6 Per FTSO there is an array of whitelisted addresses. Open the contract and use function #4 getFtsoWhitelistedPriceProviders . Set the required index and check if your address is in this list. How to read whitelisted addresses using the the PriceSubmitter contract? \u00b6 Open the contract and use function #8 voterWhitelistBitmap where you should set the address your would like to query. The function returns a bitmap corresponding to allowed FTSO indices in big-endian format. If you were allowed to submit princess for FTSOs with indices 0, 1 and 3, the returned bitmap would be 11 (in binary 1011 ) Which currencies are available on the network? \u00b6 The best way to get available currencies is to query the FtsoRegistry that holds information about available FTSOs, their addresses, prices and indices. Songbird currently supports the following symbols: [XRP, LTC, XLM, DOGE, ADA, ALGO, BCH, DGB, BTC, ETH, FIL] , but new ones could be added by governance vote. Is there a slashing mechanism for non-availability? \u00b6 There is currently no slashing for not providing a price. If you do not provide a price in a specific price epoch, your can not gain reward in that epoch. So the unavailability has a direct negative impact on your reward rate as a price provider. The network time is not the same as local time, is there something wrong? \u00b6 Due to the decentralized state of the network, one might experience some occasional time drifts (+-30s). We suggest you keep synchronized local time with global time through Network Time Protocol (NTP) to avoid missing any important submit/reveal periods. Where can I get information on which prices are rewarded \u00b6 Each FTSO emits a PriceFinalized event that contains information about calculated median price and rewarding bounds. How can I see who has delegated to me \u00b6 There is currently no on-chain structure that holds the relevant data. You might want to listen to events emitted by delegations. The NPM library is written in Typescript, can I use another language to write a price provider? \u00b6 You are free to use any language to run the price provider. Though some might be more suitable than others. Try using a language that offers good support for Ethereum smart contracts, eg. web3-your-language . Many successful price providers use different technologies such as: go, C#, python. Is there any code for writing a price provider in Python? \u00b6 This gist showcases the calculation of submit hashes in python using the web3py library. Are delegations transferable between different addresses? \u00b6 Delegations are currently not transferable. Specifically, you can't redelegate the vote power that was delegated to your address. Does the price epoch vary with each FTSO? \u00b6 No, price epoch configurations are governed by FtsoManager (you can get them using the getPriceEpochConfiguration method). This is necessary so that all submissions (and reveals) can happen at the same time. Can price epoch duration change? \u00b6 Price epoch durations are generally fixed and will not change abruptly. Any such change will be broadcasted to the community and be part of a governance decision. Why am I getting strange reverts on submission? \u00b6 One reason could be related to the status of your node. Make sure the node is healthy and has enough peers. See observation-node-faq.md","title":"Price Provider FAQ"},{"location":"tutorials/price-provider/ftso-price-provider/price-provider-faq/#price-provider-faq","text":"","title":"Price Provider FAQ"},{"location":"tutorials/price-provider/ftso-price-provider/price-provider-faq/#what-can-i-do-to-generate-strong-random-numbers","text":"Use already available random number generators that provide a cryptographically secure (pseudo) random number generator. One good example would be the csprng library for nodejs applications. Keep in mind that you can submit randoms with 256 bits so try to use all the bits for entropy. Strong random numbers can also be generated by using Web3 utils: web3.utils.toBN(web3.utils.randomHex(32))","title":"What can I do to generate strong random numbers?"},{"location":"tutorials/price-provider/ftso-price-provider/price-provider-faq/#where-can-i-find-the-contracts-i-need-to-interact-with-as-a-price-provider","text":"The PriceSubmitter contract is deployed at a fixed address : 0x1000000000000000000000000000000000000003 . All the other contracts are available as read methods on the PriceSubmitter contract. You should periodically check for updates to have up to date information. Any important updates and contract changes will be broadcasted to the community.","title":"Where can I find the contracts I need to interact with as a price provider?"},{"location":"tutorials/price-provider/ftso-price-provider/price-provider-faq/#where-can-i-browse-the-source-code-and-documentation-for-contracts","text":"All the important contracts are verified on the blockscout explorer. The main smart contract repo is referenced here important-links.md .","title":"Where can I browse the source code and documentation for contracts?"},{"location":"tutorials/price-provider/ftso-price-provider/price-provider-faq/#what-are-the-important-contracts-i-need-to-be-aware-of-to-be-a-price-provider","text":"The most important is the PriceSubmitter where you submit prices. It also has links to the below contracts. FtsoRegistry : Holds information about specific FTSOs, their symbols, indices and addresses. FTSOManager : Holds epoch and voting related configuration data and oversees all FTSOs, also gives access to additional useful contracts such as Inflation and Supply contracts. VoterWhitelister : The contract where a price provider list themselves to submit prices.","title":"What are the important contracts I need to be aware of to be a price provider?"},{"location":"tutorials/price-provider/ftso-price-provider/price-provider-faq/#how-much-does-it-cost-to-submit-prices-as-price-provider","text":"Price submissions and reveals are currently discounted and it costs approximately 3-4 SGB per day if all the submission and reveal transactions are successful.","title":"How much does it cost to submit prices as price provider?"},{"location":"tutorials/price-provider/ftso-price-provider/price-provider-faq/#where-can-i-see-for-which-ftsos-i-am-eligible-to-submit-prices","text":"Each address is whitelisted separately for each FTSO contract. There are two ways to query whitelisting data, one through the VoterWhitelister contract, the other through the PriceSubmitter contract.","title":"Where can I see for which FTSOs I am eligible to submit prices?"},{"location":"tutorials/price-provider/ftso-price-provider/price-provider-faq/#how-to-read-whitelisted-addresses-using-the-voterwhitelister-contract","text":"Per FTSO there is an array of whitelisted addresses. Open the contract and use function #4 getFtsoWhitelistedPriceProviders . Set the required index and check if your address is in this list.","title":"How to read whitelisted addresses using the VoterWhitelister contract?"},{"location":"tutorials/price-provider/ftso-price-provider/price-provider-faq/#how-to-read-whitelisted-addresses-using-the-the-pricesubmitter-contract","text":"Open the contract and use function #8 voterWhitelistBitmap where you should set the address your would like to query. The function returns a bitmap corresponding to allowed FTSO indices in big-endian format. If you were allowed to submit princess for FTSOs with indices 0, 1 and 3, the returned bitmap would be 11 (in binary 1011 )","title":"How to read whitelisted addresses using the the PriceSubmitter contract?"},{"location":"tutorials/price-provider/ftso-price-provider/price-provider-faq/#which-currencies-are-available-on-the-network","text":"The best way to get available currencies is to query the FtsoRegistry that holds information about available FTSOs, their addresses, prices and indices. Songbird currently supports the following symbols: [XRP, LTC, XLM, DOGE, ADA, ALGO, BCH, DGB, BTC, ETH, FIL] , but new ones could be added by governance vote.","title":"Which currencies are available on the network?"},{"location":"tutorials/price-provider/ftso-price-provider/price-provider-faq/#is-there-a-slashing-mechanism-for-non-availability","text":"There is currently no slashing for not providing a price. If you do not provide a price in a specific price epoch, your can not gain reward in that epoch. So the unavailability has a direct negative impact on your reward rate as a price provider.","title":"Is there a slashing mechanism for non-availability?"},{"location":"tutorials/price-provider/ftso-price-provider/price-provider-faq/#the-network-time-is-not-the-same-as-local-time-is-there-something-wrong","text":"Due to the decentralized state of the network, one might experience some occasional time drifts (+-30s). We suggest you keep synchronized local time with global time through Network Time Protocol (NTP) to avoid missing any important submit/reveal periods.","title":"The network time is not the same as local time, is there something wrong?"},{"location":"tutorials/price-provider/ftso-price-provider/price-provider-faq/#where-can-i-get-information-on-which-prices-are-rewarded","text":"Each FTSO emits a PriceFinalized event that contains information about calculated median price and rewarding bounds.","title":"Where can I get information on which prices are rewarded"},{"location":"tutorials/price-provider/ftso-price-provider/price-provider-faq/#how-can-i-see-who-has-delegated-to-me","text":"There is currently no on-chain structure that holds the relevant data. You might want to listen to events emitted by delegations.","title":"How can I see who has delegated to me"},{"location":"tutorials/price-provider/ftso-price-provider/price-provider-faq/#the-npm-library-is-written-in-typescript-can-i-use-another-language-to-write-a-price-provider","text":"You are free to use any language to run the price provider. Though some might be more suitable than others. Try using a language that offers good support for Ethereum smart contracts, eg. web3-your-language . Many successful price providers use different technologies such as: go, C#, python.","title":"The NPM library is written in Typescript, can I use another language to write a price provider?"},{"location":"tutorials/price-provider/ftso-price-provider/price-provider-faq/#is-there-any-code-for-writing-a-price-provider-in-python","text":"This gist showcases the calculation of submit hashes in python using the web3py library.","title":"Is there any code for writing a price provider in Python?"},{"location":"tutorials/price-provider/ftso-price-provider/price-provider-faq/#are-delegations-transferable-between-different-addresses","text":"Delegations are currently not transferable. Specifically, you can't redelegate the vote power that was delegated to your address.","title":"Are delegations transferable between different addresses?"},{"location":"tutorials/price-provider/ftso-price-provider/price-provider-faq/#does-the-price-epoch-vary-with-each-ftso","text":"No, price epoch configurations are governed by FtsoManager (you can get them using the getPriceEpochConfiguration method). This is necessary so that all submissions (and reveals) can happen at the same time.","title":"Does the price epoch vary with each FTSO?"},{"location":"tutorials/price-provider/ftso-price-provider/price-provider-faq/#can-price-epoch-duration-change","text":"Price epoch durations are generally fixed and will not change abruptly. Any such change will be broadcasted to the community and be part of a governance decision.","title":"Can price epoch duration change?"},{"location":"tutorials/price-provider/ftso-price-provider/price-provider-faq/#why-am-i-getting-strange-reverts-on-submission","text":"One reason could be related to the status of your node. Make sure the node is healthy and has enough peers. See observation-node-faq.md","title":"Why am I getting strange reverts on submission?"},{"location":"tutorials/price-provider/ftso-price-provider/whitelisting-a-price-provider/","text":"Whitelisting a price provider \u00b6 Top vote power holders per FTSO are allowed to submit prices. Per FTSO the vote power of an address is calculated as a combination of WSGB vote power and fAsset vote power. Whitelisting a price provider is done in a fully decentralized way and facilitated by the VoterWhitelister contract. Price providers can request to be whitelisted for a specific asset index using requestWhitelistingVoter() or request whitelisting for all assets at once requestFullVoterWhitelisting() . The VoterWhitelister contract enables price submissions only by whitelisted addresses. For each FTSO, up to N (currently 100) voters can be listed. The number of voters per asset can vary and is configurable by Governance. When a price provider tries to whitelist themselves, its vote power is calculated using the vote power block of the current reward epoch. For each FTSO vote power is a normalized value of WNAT vote power and the fAsset vote power. The prerequisite for a price provider is explicit whitelisting. Each user can request its address to be whitelisted by the VoterWhitelister contract. If the whitelist is not full, the address is immediately whitelisted. If the list is full, the user with the minimal voter power is found and replaced with the requesting user only if the new user's power is strictly greater. If the number of voter slots is ever lowered, voter addresses will be removed from the whitelist one by one, each time removing the address with the minimal power. Events are fired to notify voters about the change of voter status on the whitelist. There are two methods that you can use to whitelist your public address. The method requestFullVoterWhitelisting tries to whitelist your address for all available FTSOs, while requestWhitelistingVoter tries to whitelist the address for a specified FTSO index. Currently fAssets are not deployed thus no address has fAsset vote power, this means vote power is equal on all FTSOs. Thus it makes more sense to call the full method, as it might save you some gas fees. Once fAssets are live on the network, your vote power might vary from FTSO to FTSO, so you will need to explicitly whitelist your address for specific FTSOs using requestWhitelistingVoter . Good luck!!!","title":"Whitelisting a price provider"},{"location":"tutorials/price-provider/ftso-price-provider/whitelisting-a-price-provider/#whitelisting-a-price-provider","text":"Top vote power holders per FTSO are allowed to submit prices. Per FTSO the vote power of an address is calculated as a combination of WSGB vote power and fAsset vote power. Whitelisting a price provider is done in a fully decentralized way and facilitated by the VoterWhitelister contract. Price providers can request to be whitelisted for a specific asset index using requestWhitelistingVoter() or request whitelisting for all assets at once requestFullVoterWhitelisting() . The VoterWhitelister contract enables price submissions only by whitelisted addresses. For each FTSO, up to N (currently 100) voters can be listed. The number of voters per asset can vary and is configurable by Governance. When a price provider tries to whitelist themselves, its vote power is calculated using the vote power block of the current reward epoch. For each FTSO vote power is a normalized value of WNAT vote power and the fAsset vote power. The prerequisite for a price provider is explicit whitelisting. Each user can request its address to be whitelisted by the VoterWhitelister contract. If the whitelist is not full, the address is immediately whitelisted. If the list is full, the user with the minimal voter power is found and replaced with the requesting user only if the new user's power is strictly greater. If the number of voter slots is ever lowered, voter addresses will be removed from the whitelist one by one, each time removing the address with the minimal power. Events are fired to notify voters about the change of voter status on the whitelist. There are two methods that you can use to whitelist your public address. The method requestFullVoterWhitelisting tries to whitelist your address for all available FTSOs, while requestWhitelistingVoter tries to whitelist the address for a specified FTSO index. Currently fAssets are not deployed thus no address has fAsset vote power, this means vote power is equal on all FTSOs. Thus it makes more sense to call the full method, as it might save you some gas fees. Once fAssets are live on the network, your vote power might vary from FTSO to FTSO, so you will need to explicitly whitelist your address for specific FTSOs using requestWhitelistingVoter . Good luck!!!","title":"Whitelisting a price provider"},{"location":"tutorials/price-provider/ftso-price-provider/whitelisting-price-provider-faq/","text":"Whitelisting price provider FAQ \u00b6 Is there a minimal vote power required to be whitelisted as a price provider? \u00b6 There is no minimal vote power required. Top 100 price providers with the highest vote power can provide prices. This is handled on-chain by VoterWhitelister contract. Once all the slots in the list are taken and a new address is being whitelisted, the address with the lowest vote power will be kicked out of the list. Where can I check if I am whitelisted as a price provider? \u00b6 Every time a new price provider\u2019s address is added to the whitelist (or an old one is removed), an event is emitted. Once an address is unlisted, submissions will also start failing (reverting). It can also help to listen to events that will notify you about unlisting once it happens. If I was removed from the whitelist, how can I re-list myself? \u00b6 If your address was kicked out of the whitelist, you will be able to list yourself once the next reward epoch starts. For doing this you will need more vote power then one of the listed providers. You should see if you can have more delegations done to your address before the next reward epoch vote power block (snapshot) is chosen. Anyway you should try to re-list since maybe some other provider has less delegations and less vote power then your own. See also troubleshooting","title":"Whitelisting price provider FAQ"},{"location":"tutorials/price-provider/ftso-price-provider/whitelisting-price-provider-faq/#whitelisting-price-provider-faq","text":"","title":"Whitelisting price provider FAQ"},{"location":"tutorials/price-provider/ftso-price-provider/whitelisting-price-provider-faq/#is-there-a-minimal-vote-power-required-to-be-whitelisted-as-a-price-provider","text":"There is no minimal vote power required. Top 100 price providers with the highest vote power can provide prices. This is handled on-chain by VoterWhitelister contract. Once all the slots in the list are taken and a new address is being whitelisted, the address with the lowest vote power will be kicked out of the list.","title":"Is there a minimal vote power required to be whitelisted as a price provider?"},{"location":"tutorials/price-provider/ftso-price-provider/whitelisting-price-provider-faq/#where-can-i-check-if-i-am-whitelisted-as-a-price-provider","text":"Every time a new price provider\u2019s address is added to the whitelist (or an old one is removed), an event is emitted. Once an address is unlisted, submissions will also start failing (reverting). It can also help to listen to events that will notify you about unlisting once it happens.","title":"Where can I check if I am whitelisted as a price provider?"},{"location":"tutorials/price-provider/ftso-price-provider/whitelisting-price-provider-faq/#if-i-was-removed-from-the-whitelist-how-can-i-re-list-myself","text":"If your address was kicked out of the whitelist, you will be able to list yourself once the next reward epoch starts. For doing this you will need more vote power then one of the listed providers. You should see if you can have more delegations done to your address before the next reward epoch vote power block (snapshot) is chosen. Anyway you should try to re-list since maybe some other provider has less delegations and less vote power then your own. See also troubleshooting","title":"If I was removed from the whitelist, how can I re-list myself?"},{"location":"tutorials/price-provider/setting-up-an-observation-node/","text":"Setting up an observation node \u00b6 Observation node \u00b6 Flare network is based on the Federated Byzantine Agreement (FBA) consensus algorithm, which is enforced by validator nodes. In first stage of Songbird life cycle, the set of core validators for producing blocks is run by Flare. Anyone can add an external node to observe the network and submit transactions. The observation node connects directly to the core validators and offers you fast access to the network. This is faster than using publicly provided nodes which usually enforce rate limiting. Why do I need an observation node? \u00b6 Running an observation node is not mandatory. A price provider can utilize public interfaces, AKA public RPC nodes. Alas, running your own observation nodes provides a safer, faster and more robust connection, for submitting transactions and for reading events or other network data. Your own node for submitting transactions ( submitHashes ) enables sending those a few seconds later compared to public nodes. These few precious seconds can be used for getting more price data data before submitting your transaction. Setting up the node \u00b6 Set up a local instance of peering node to have a more stable connection. To set up a node follow the instructions provided on the node-config repo. Make sure to have enough disk space to allow for db resizes. Whitelisting \u00b6 To set up the observation node, you need to whitelist your peering IP. Submit a whitelisting request here . You will be notified about the whitelisting process via your submitted email. You can also check the status of whitelisting by running the command curl -m 10 -sX POST --data '{ \"jsonrpc\":\"2.0\", \"id\":1, \"method\":\"info.getNodeIP\" }' -H 'content-type:application/json;' https://songbird.flare.network/ext/info Which will return a json containing node IP-s if your IP is whitelisted. Running the node \u00b6 After cloning and compiling the songbird node, adjust the necessary configurations in songbird.sh so that the database location points to the external disk. Run ./cmd/songbird.sh to start bootstrapping. The first bootstrap needs quite a long time to complete and a large amount of disk space (depends on the network size, it can be up to 2TB ). Be sure to have sufficient hardware to run the node efficiently, the current minimum specifications are: 16 cpu cores 16GB of RAM and at least 1-2TB disk space. After the bootstrap completes the query curl http://127.0.0.1:9650/ext/health | jq . the query will return healthy and you can start using the node. If you need to restart the node, use the flag --existing to reuse the existing downloaded database. This will enable much faster resync on restart.","title":"Setting up an observation node"},{"location":"tutorials/price-provider/setting-up-an-observation-node/#setting-up-an-observation-node","text":"","title":"Setting up an observation node"},{"location":"tutorials/price-provider/setting-up-an-observation-node/#observation-node","text":"Flare network is based on the Federated Byzantine Agreement (FBA) consensus algorithm, which is enforced by validator nodes. In first stage of Songbird life cycle, the set of core validators for producing blocks is run by Flare. Anyone can add an external node to observe the network and submit transactions. The observation node connects directly to the core validators and offers you fast access to the network. This is faster than using publicly provided nodes which usually enforce rate limiting.","title":"Observation node"},{"location":"tutorials/price-provider/setting-up-an-observation-node/#why-do-i-need-an-observation-node","text":"Running an observation node is not mandatory. A price provider can utilize public interfaces, AKA public RPC nodes. Alas, running your own observation nodes provides a safer, faster and more robust connection, for submitting transactions and for reading events or other network data. Your own node for submitting transactions ( submitHashes ) enables sending those a few seconds later compared to public nodes. These few precious seconds can be used for getting more price data data before submitting your transaction.","title":"Why do I need an observation node?"},{"location":"tutorials/price-provider/setting-up-an-observation-node/#setting-up-the-node","text":"Set up a local instance of peering node to have a more stable connection. To set up a node follow the instructions provided on the node-config repo. Make sure to have enough disk space to allow for db resizes.","title":"Setting up the node"},{"location":"tutorials/price-provider/setting-up-an-observation-node/#whitelisting","text":"To set up the observation node, you need to whitelist your peering IP. Submit a whitelisting request here . You will be notified about the whitelisting process via your submitted email. You can also check the status of whitelisting by running the command curl -m 10 -sX POST --data '{ \"jsonrpc\":\"2.0\", \"id\":1, \"method\":\"info.getNodeIP\" }' -H 'content-type:application/json;' https://songbird.flare.network/ext/info Which will return a json containing node IP-s if your IP is whitelisted.","title":"Whitelisting"},{"location":"tutorials/price-provider/setting-up-an-observation-node/#running-the-node","text":"After cloning and compiling the songbird node, adjust the necessary configurations in songbird.sh so that the database location points to the external disk. Run ./cmd/songbird.sh to start bootstrapping. The first bootstrap needs quite a long time to complete and a large amount of disk space (depends on the network size, it can be up to 2TB ). Be sure to have sufficient hardware to run the node efficiently, the current minimum specifications are: 16 cpu cores 16GB of RAM and at least 1-2TB disk space. After the bootstrap completes the query curl http://127.0.0.1:9650/ext/health | jq . the query will return healthy and you can start using the node. If you need to restart the node, use the flag --existing to reuse the existing downloaded database. This will enable much faster resync on restart.","title":"Running the node"},{"location":"tutorials/price-provider/setting-up-an-observation-node/observation-node-faq/","text":"Observation Node FAQ \u00b6 Do I need to re-whitelist my peering node IP? \u00b6 No, you do not need to re-whitelist the IP address. I want to have greater redundancy and would like to whitelist multiple nodes, can I do that? \u00b6 You can whitelist multiple IPs per single provider. Can an unhealthy node cause my TXs to revert? \u00b6 Yes, at times, not enough connected peers can cause your transactions to revert. Make sure your node state is healthy and that it has enough connected peers. What is the required number of connected peers? \u00b6 If the number of peers falls below 19, a good chance that some of the peers have disconnected from your node, try to restart it.","title":"Observation Node FAQ"},{"location":"tutorials/price-provider/setting-up-an-observation-node/observation-node-faq/#observation-node-faq","text":"","title":"Observation Node FAQ"},{"location":"tutorials/price-provider/setting-up-an-observation-node/observation-node-faq/#do-i-need-to-re-whitelist-my-peering-node-ip","text":"No, you do not need to re-whitelist the IP address.","title":"Do I need to re-whitelist my peering node IP?"},{"location":"tutorials/price-provider/setting-up-an-observation-node/observation-node-faq/#i-want-to-have-greater-redundancy-and-would-like-to-whitelist-multiple-nodes-can-i-do-that","text":"You can whitelist multiple IPs per single provider.","title":"I want to have greater redundancy and would like to whitelist multiple nodes, can I do that?"},{"location":"tutorials/price-provider/setting-up-an-observation-node/observation-node-faq/#can-an-unhealthy-node-cause-my-txs-to-revert","text":"Yes, at times, not enough connected peers can cause your transactions to revert. Make sure your node state is healthy and that it has enough connected peers.","title":"Can an unhealthy node cause my TXs to revert?"},{"location":"tutorials/price-provider/setting-up-an-observation-node/observation-node-faq/#what-is-the-required-number-of-connected-peers","text":"If the number of peers falls below 19, a good chance that some of the peers have disconnected from your node, try to restart it.","title":"What is the required number of connected peers?"},{"location":"tutorials/price-provider/troubleshooting/observation-node/","text":"Observation node \u00b6 The node does not sync after a long time and dies abruptly, what to do? \u00b6 Make sure, that the database location has sufficient disk space (database size might change a lot during bootstrapping). I'm getting strange errors on submission and revert messages are cryptic \u00b6 This might be a symptom of node connection error. Try to restart node and make sure you have enough disk space. I am getting a strange error failed to send GetAcceptedFrontier(MtF8bVH241hetCQJgsKEdKyJBs8vhp1BC, 11111111111111111111111111111111LpoYY, NUMBER) when bootstrapping the node, what should I do? \u00b6 It seems, that your node got disconnected during the bootstrapping. Restart the node, but to speed up the process, use --existing flag to reuse the data and don\u2019t do the bootstrap from zero. I have synced the node but it does not become healthy. What can I do? \u00b6 It often happens that a new node gets synced but stays unhealthy for no apparent reason. A restart with --existing flag usually helps.","title":"Observation node"},{"location":"tutorials/price-provider/troubleshooting/observation-node/#observation-node","text":"","title":"Observation node"},{"location":"tutorials/price-provider/troubleshooting/observation-node/#the-node-does-not-sync-after-a-long-time-and-dies-abruptly-what-to-do","text":"Make sure, that the database location has sufficient disk space (database size might change a lot during bootstrapping).","title":"The node does not sync after a long time and dies abruptly, what to do?"},{"location":"tutorials/price-provider/troubleshooting/observation-node/#im-getting-strange-errors-on-submission-and-revert-messages-are-cryptic","text":"This might be a symptom of node connection error. Try to restart node and make sure you have enough disk space.","title":"I'm getting strange errors on submission and revert messages are cryptic"},{"location":"tutorials/price-provider/troubleshooting/observation-node/#i-am-getting-a-strange-error-failed-to-send-getacceptedfrontiermtf8bvh241hetcqjgskedkyjbs8vhp1bc-11111111111111111111111111111111lpoyy-number-when-bootstrapping-the-node-what-should-i-do","text":"It seems, that your node got disconnected during the bootstrapping. Restart the node, but to speed up the process, use --existing flag to reuse the data and don\u2019t do the bootstrap from zero.","title":"I am getting a strange error failed to send GetAcceptedFrontier(MtF8bVH241hetCQJgsKEdKyJBs8vhp1BC, 11111111111111111111111111111111LpoYY, NUMBER) when bootstrapping the node, what should I do?"},{"location":"tutorials/price-provider/troubleshooting/observation-node/#i-have-synced-the-node-but-it-does-not-become-healthy-what-can-i-do","text":"It often happens that a new node gets synced but stays unhealthy for no apparent reason. A restart with --existing flag usually helps.","title":"I have synced the node but it does not become healthy. What can I do?"},{"location":"tutorials/price-provider/troubleshooting/price-provider/","text":"Price provider \u00b6 I have increased my vote power, but the address is still not getting whitelisted, what is wrong? \u00b6 Addresses are whitelisted based on vote power as reflected in the vote power block of the current reward epoch. Increased vote power on a different block will not enable your address to be whitelisted. How do I find the vote power block of the current reward epoch? \u00b6 In the FtsoManager contract use #8 for reading getCurrentRewardEpoch . Then use #13 getRewardEpochVotePowerBlock where one should set the current reward epoch number (from #8) and see the vote power block for that epoch. How do I check my vote power for a specific vote power block? \u00b6 In the WNat contract use #26 votePowerOfAt, set the address and the block and read the response. My submissions are reverted as being in the wrong epoch \u00b6 You might be submitting a bit too late in the current epoch. Try to submit the price a few seconds earlier. You might want to consider running an observation node that provides a better quality connection to the network. Also, check if you server time is synced with through Network Time Protocol (NTP). I am experiencing strange reverts when submitting and revealing prices \u00b6 The unexpected reverts might come from the too low gas amount provided to submit/reveal transactions. Increase the gas limit of the transaction to 2500000.","title":"Price provider"},{"location":"tutorials/price-provider/troubleshooting/price-provider/#price-provider","text":"","title":"Price provider"},{"location":"tutorials/price-provider/troubleshooting/price-provider/#i-have-increased-my-vote-power-but-the-address-is-still-not-getting-whitelisted-what-is-wrong","text":"Addresses are whitelisted based on vote power as reflected in the vote power block of the current reward epoch. Increased vote power on a different block will not enable your address to be whitelisted.","title":"I have increased my vote power, but the address is still not getting whitelisted, what is wrong?"},{"location":"tutorials/price-provider/troubleshooting/price-provider/#how-do-i-find-the-vote-power-block-of-the-current-reward-epoch","text":"In the FtsoManager contract use #8 for reading getCurrentRewardEpoch . Then use #13 getRewardEpochVotePowerBlock where one should set the current reward epoch number (from #8) and see the vote power block for that epoch.","title":"How do I find the vote power block of the current reward epoch?"},{"location":"tutorials/price-provider/troubleshooting/price-provider/#how-do-i-check-my-vote-power-for-a-specific-vote-power-block","text":"In the WNat contract use #26 votePowerOfAt, set the address and the block and read the response.","title":"How do I check my vote power for a specific vote power block?"},{"location":"tutorials/price-provider/troubleshooting/price-provider/#my-submissions-are-reverted-as-being-in-the-wrong-epoch","text":"You might be submitting a bit too late in the current epoch. Try to submit the price a few seconds earlier. You might want to consider running an observation node that provides a better quality connection to the network. Also, check if you server time is synced with through Network Time Protocol (NTP).","title":"My submissions are reverted as being in the wrong epoch"},{"location":"tutorials/price-provider/troubleshooting/price-provider/#i-am-experiencing-strange-reverts-when-submitting-and-revealing-prices","text":"The unexpected reverts might come from the too low gas amount provided to submit/reveal transactions. Increase the gas limit of the transaction to 2500000.","title":"I am experiencing strange reverts when submitting and revealing prices"},{"location":"tutorials/reward-claiming/","text":"Reward claiming overview \u00b6 Each user delegating its vote power to an active price provider could earn rewards. The rewards are accumulated through the course of reward epochs, usually a few days long. Once each reward epoch finalizes the user can claim the rewards that were earned during this reward epoch. The rewards are accumulated in the FtsoRewardManager contract and expire after an expiry period. The claim operation costs some gas - paid in SGB, and can be done for one reward epoch or a list of a few epochs at once. The reward system distributes a large part of the yearly Songbird inflation to participants of the FTSO system. This could be seen as the mining process for the Songbird chain. During the first year of Songbird's existence, most of the 10% yearly inflation will be distributed to participants of the FTSO system. The distribution works such that the yearly inflation is divided into daily portions. That daily portion is split between all price epochs happening that day. The FTSO system includes price feeds for USD prices of a few assets, Ex: BTC/USD, XRP/USD etc. Per price epoch one FTSO price feed is chosen to be rewarded. The reward is split between the addresses which submitted the most accurate prices. The reward flow: Per price epoch all price feeds to an FTSO are being used to calculate a weighted median. The weighted median is the chosen price of this FTSO (time series). Next, a percentage of the addresses on each side of the weighted median are chosen to be rewarded. Each address is rewarded according to its weight (vote power) The reward data is sent to the FtsoRewardManager smart contract. once the reward epoch is finalized. this reward can be claimed from the FtsoRewardManager . Each price provider receives reward according to its vote power. Those rewards can be claimed by the price provider and anyone who delegated its vote power to this price provider during this reward epoch.","title":"Reward claiming overview"},{"location":"tutorials/reward-claiming/#reward-claiming-overview","text":"Each user delegating its vote power to an active price provider could earn rewards. The rewards are accumulated through the course of reward epochs, usually a few days long. Once each reward epoch finalizes the user can claim the rewards that were earned during this reward epoch. The rewards are accumulated in the FtsoRewardManager contract and expire after an expiry period. The claim operation costs some gas - paid in SGB, and can be done for one reward epoch or a list of a few epochs at once. The reward system distributes a large part of the yearly Songbird inflation to participants of the FTSO system. This could be seen as the mining process for the Songbird chain. During the first year of Songbird's existence, most of the 10% yearly inflation will be distributed to participants of the FTSO system. The distribution works such that the yearly inflation is divided into daily portions. That daily portion is split between all price epochs happening that day. The FTSO system includes price feeds for USD prices of a few assets, Ex: BTC/USD, XRP/USD etc. Per price epoch one FTSO price feed is chosen to be rewarded. The reward is split between the addresses which submitted the most accurate prices. The reward flow: Per price epoch all price feeds to an FTSO are being used to calculate a weighted median. The weighted median is the chosen price of this FTSO (time series). Next, a percentage of the addresses on each side of the weighted median are chosen to be rewarded. Each address is rewarded according to its weight (vote power) The reward data is sent to the FtsoRewardManager smart contract. once the reward epoch is finalized. this reward can be claimed from the FtsoRewardManager . Each price provider receives reward according to its vote power. Those rewards can be claimed by the price provider and anyone who delegated its vote power to this price provider during this reward epoch.","title":"Reward claiming overview"},{"location":"tutorials/reward-claiming/reward-claiming-in-detail/","text":"Reward claiming in detail \u00b6 FTSO Rewards \u00b6 During the FTSO price voting process, rewards are being distributed to price (data) providers based on their WNAT (WSGB) vote power. Depending on the vote power share and price provider fee percentage, a part of this reward belongs to users who have delegated their WSGB vote power to the price providers. The rewards can be claimed via the contract FtsoRewardManager that implements IFtsoRewardManager interface as described in this document. Reward claiming \u00b6 The reward claiming process depends on vote power delegation mode. The default delegation mode is delegation by percentage. Delegation by amount is intended for advanced users. The delegation mode of a user can be checked by calling delegationModeOf on the WNAT contract that implements the IVPToken interface. Delegation by percentage \u00b6 The user that has delegated vote power by percentage can claim rewards by calling the function claimReward with the following signature. function claimReward ( address payable _recipient , uint256 [] memory _rewardEpochs ) external returns ( uint256 _rewardAmount ) Parameters: _recipient : The address to which the reward is transferred (can be different from the calling address). _rewardEpochs : The list of reward epoch IDs for which the reward is being claimed. _rewardAmount : The amount of claimed rewards that is transferred to _recipient . The amount is the sum of all rewards that the caller ( msg.sender ) is entitled to in the specified _rewardEpochs (i.e., it includes the unclaimed rewards for all price providers the user has delegated to). Note that this function throws an exception if it is called by a user ( msg.sender ) that is delegating by amount. To specify an appropriate input array _rewardEpochs , the function getEpochsWithUnclaimedRewards can be used. It iterates over the past reward epochs that still enable reward claiming and gathers the IDs of those, for which the reward allocated to _beneficiary has not yet been (fully) claimed. function getEpochsWithUnclaimedRewards ( address _beneficiary ) external view override returns ( uint256 [] memory _epochIds ) To obtain more detailed information on reward status, its origin and amount, a user can use the functions getStateOfRewards or getStateOfRewardsFromDataProviders described later in the document. A user that is delegating by percentage can also use the function claimRewardFromDataProviders (described in the following section) to claim the rewards only for specific price providers (e.g., if the user wishes to have rewards from different price providers transferred to different recipient addresses). However, the gas consumption for calling claimRewardFromDataProviders is larger. Delegation by amount \u00b6 A user delegating vote power by amount can claim rewards by calling the function claimRewardFromDataProviders with the following signature. function claimRewardFromDataProviders ( address payable _recipient , uint256 [] memory _rewardEpochs , address [] memory _dataProviders ) external returns ( uint256 _rewardAmount ) Parameters: _recipient : The address to which the reward is transferred (can be different from the calling address). _rewardEpochs : The list of reward epoch IDs for which the reward is being claimed. _dataProviders : The list of addresses corresponding to price providers. _rewardAmount : The amount of claimed rewards that is transferred to _recipient . The amount is the sum of all rewards that the caller ( msg.sender ) is entitled to in the specified _rewardEpochs (i.e., it includes the unclaimed rewards for all price providers specified in _dataProviders ). The main difference in comparison to claimReward is that claimRewardFromDataProviders requires a user to specify the array _dataProviders containing the addresses of price providers that the user has delegated the vote power to. To prepare the input array _rewardEpochs , a user that is delegating by amount can not use the function getEpochsWithUnclaimedRewards (a request fails with exception). Instead, the function getEpochsWithClaimableRewards can be called to get the information on the reward epochs for which the reward is still claimable, and getStateOfRewardsFromDataProvider to obtain details about the state of rewards in a specific (claimable) reward epoch. Below is a code snippet describing this procedure. The functions and their parameters are in more detail explained in the subsequent sections. ( startEpochId , endEpochId ) = getEpochsWithUnclaimedRewards (); for ( uint256 epochId = startEpochId ; epochId <= endEpochId ; epochId ++ ) { (...) = getStateOfRewardsFromDataProviders (..., epochId , ...); } Events \u00b6 For every call of claimReward or claimRewardFromDataProviders one or more events of the following type are issued. A specific event is associated with a single pair of price provider and reward epoch. event RewardClaimed ( address indexed dataProvider , address indexed whoClaimed , address indexed sentTo , uint256 rewardEpoch , uint256 amount ) Parameters: dataProvider : The address to which the reward was allocated. whoClaimed : The address from which the reward claim was initiated. sentTo : The address to which the amount was sent. rewardEpoch : The ID of the reward epoch the claimed reward corresponds to. amount : The value of the claimed reward. Reward claim expiry \u00b6 The reward can be claimed from the time the reward was allocated until the reward expiry epoch. The oldest and the newest reward epoch that allow reward claiming can be obtained by calling getEpochsWithClaimableRewards (these correspond to the return values _startEpochId and _endEpochId , respectively). function getEpochsWithClaimableRewards () external view returns ( uint256 _startEpochId , uint256 _endEpochId ) The reward expiry epoch is also communicated through RewardClaimsExpired event. event RewardClaimsExpired ( uint256 rewardEpochId ) The information for which epochs the rewards have been already claimed can be obtained by checking the state of rewards described in the following section. Reward amount in depth \u00b6 Overview \u00b6 Suppose a total reward amount REWARD is allocated to a price provider P for a reward epoch E . This reward is divided among P and users who delegated to P depending on the WSGB vote power share and P 's fee percentage. Let PVP be the total WSGB vote power associated with P . This is the sum of P 's own undelegated WSGB vote power and the WSGB vote powers that have been delegated to P . The vote power snapshot is used, which corresponds to a specific block before the start of E (vote power block). Suppose SHARE is the vote power share: for P this is the ratio between P 's own undelegated WNat vote power and PVP , for delegator this is the ratio between the WNat vote power that the delegator has delegated to P and PVP . Suppose FP denotes P 's fee percentage for E . Then P is entitled to the reward equal to (SHARE * (1 - FP) * REWARD) + (FP * REWARD) , and a delegator is entitled to the amount equal to SHARE * (1 - FP) * REWARD . State of rewards \u00b6 The reward amounts for a specific address can be checked by calling either getStateOfRewards or getStateOfRewardsFromDataProviders . The difference between these two functions is that in the first the array of price providers (to which the reward is initially allocated) is obtained based on delegation history, while in the second the array has to be specified as an input parameter. Note that getStateOfRewards can only be used for addresses that are declared to be delegating by percentage. function getStateOfRewards ( address _beneficiary , uint256 _rewardEpoch ) external view returns ( address [] memory _dataProviders , uint256 [] memory _rewardAmounts , bool [] memory _claimed , bool _claimable ) function getStateOfRewardsFromDataProviders ( address _beneficiary , uint256 _rewardEpoch , address [] memory _dataProviders ) external view returns ( uint256 [] memory _rewardAmounts , bool [] memory _claimed , bool _claimable ) Parameters: _beneficiary : The address for which the state is being checked. _rewardEpoch : The id of the reward epoch for which the state is being checked. _dataProviders : The positional array of addresses representing the price providers the rewards have been allocated to. _rewardAmounts : The positional array of values representing the reward amounts the _beneficiary is entitled to. _claimed : The positional array of boolean values indicating if the reward amount has already been claimed. _claimable : The boolean value indicating if the reward amounts are claimable (i.e., are available and have not expired). Note that the amounts reported by these two methods are informational and can slightly differ from the actual amounts obtained via claimReward and claimRewardFromDataProviders due to rounding. Reward fee \u00b6 Current fee percentage \u00b6 Price provider fee is determined by fee percentage. Current setting can be obtained by getDataProviderCurrentFeePercentage . function getDataProviderCurrentFeePercentage ( address _dataProvider ) external view returns ( uint256 _feePercentageBIPS ) The value _feePercentageBIPS is given in basis points (BIPS), which is a percentage value multiplied by 100 (e.g., 10% fee is 1000). Scheduled fee percentage changes \u00b6 The fee percentage is subject to changes. The changes made by price providers are time locked, meaning they are scheduled for some future time. Scheduled changes can be checked by calling getDataProviderScheduledFeePercentageChanges , which returns the fee percentages in future. function getDataProviderScheduledFeePercentageChanges ( address _dataProvider ) external view returns ( uint256 [] memory _feePercentageBIPS , uint256 [] memory _validFromEpoch , bool [] memory _fixed ) Parameters: _dataProvder : The address representing a price provider. _feePercentageBIPS : The positional array of scheduled fee percentages in BIPS. validFromEpoch : The positional array of future reward epoch ids from which the value _feePercentageBIPS will be effective. _fixed : The positional array of boolean values indicating if the setting is fixed. If the scheduled fee percentage is not fixed, this means that it can still be updated by price provider over the course of the current reward epoch. After the current reward epoch passes, the setting becomes fixed.","title":"Reward claiming in detail"},{"location":"tutorials/reward-claiming/reward-claiming-in-detail/#reward-claiming-in-detail","text":"","title":"Reward claiming in detail"},{"location":"tutorials/reward-claiming/reward-claiming-in-detail/#ftso-rewards","text":"During the FTSO price voting process, rewards are being distributed to price (data) providers based on their WNAT (WSGB) vote power. Depending on the vote power share and price provider fee percentage, a part of this reward belongs to users who have delegated their WSGB vote power to the price providers. The rewards can be claimed via the contract FtsoRewardManager that implements IFtsoRewardManager interface as described in this document.","title":"FTSO Rewards"},{"location":"tutorials/reward-claiming/reward-claiming-in-detail/#reward-claiming","text":"The reward claiming process depends on vote power delegation mode. The default delegation mode is delegation by percentage. Delegation by amount is intended for advanced users. The delegation mode of a user can be checked by calling delegationModeOf on the WNAT contract that implements the IVPToken interface.","title":"Reward claiming"},{"location":"tutorials/reward-claiming/reward-claiming-in-detail/#delegation-by-percentage","text":"The user that has delegated vote power by percentage can claim rewards by calling the function claimReward with the following signature. function claimReward ( address payable _recipient , uint256 [] memory _rewardEpochs ) external returns ( uint256 _rewardAmount ) Parameters: _recipient : The address to which the reward is transferred (can be different from the calling address). _rewardEpochs : The list of reward epoch IDs for which the reward is being claimed. _rewardAmount : The amount of claimed rewards that is transferred to _recipient . The amount is the sum of all rewards that the caller ( msg.sender ) is entitled to in the specified _rewardEpochs (i.e., it includes the unclaimed rewards for all price providers the user has delegated to). Note that this function throws an exception if it is called by a user ( msg.sender ) that is delegating by amount. To specify an appropriate input array _rewardEpochs , the function getEpochsWithUnclaimedRewards can be used. It iterates over the past reward epochs that still enable reward claiming and gathers the IDs of those, for which the reward allocated to _beneficiary has not yet been (fully) claimed. function getEpochsWithUnclaimedRewards ( address _beneficiary ) external view override returns ( uint256 [] memory _epochIds ) To obtain more detailed information on reward status, its origin and amount, a user can use the functions getStateOfRewards or getStateOfRewardsFromDataProviders described later in the document. A user that is delegating by percentage can also use the function claimRewardFromDataProviders (described in the following section) to claim the rewards only for specific price providers (e.g., if the user wishes to have rewards from different price providers transferred to different recipient addresses). However, the gas consumption for calling claimRewardFromDataProviders is larger.","title":"Delegation by percentage"},{"location":"tutorials/reward-claiming/reward-claiming-in-detail/#delegation-by-amount","text":"A user delegating vote power by amount can claim rewards by calling the function claimRewardFromDataProviders with the following signature. function claimRewardFromDataProviders ( address payable _recipient , uint256 [] memory _rewardEpochs , address [] memory _dataProviders ) external returns ( uint256 _rewardAmount ) Parameters: _recipient : The address to which the reward is transferred (can be different from the calling address). _rewardEpochs : The list of reward epoch IDs for which the reward is being claimed. _dataProviders : The list of addresses corresponding to price providers. _rewardAmount : The amount of claimed rewards that is transferred to _recipient . The amount is the sum of all rewards that the caller ( msg.sender ) is entitled to in the specified _rewardEpochs (i.e., it includes the unclaimed rewards for all price providers specified in _dataProviders ). The main difference in comparison to claimReward is that claimRewardFromDataProviders requires a user to specify the array _dataProviders containing the addresses of price providers that the user has delegated the vote power to. To prepare the input array _rewardEpochs , a user that is delegating by amount can not use the function getEpochsWithUnclaimedRewards (a request fails with exception). Instead, the function getEpochsWithClaimableRewards can be called to get the information on the reward epochs for which the reward is still claimable, and getStateOfRewardsFromDataProvider to obtain details about the state of rewards in a specific (claimable) reward epoch. Below is a code snippet describing this procedure. The functions and their parameters are in more detail explained in the subsequent sections. ( startEpochId , endEpochId ) = getEpochsWithUnclaimedRewards (); for ( uint256 epochId = startEpochId ; epochId <= endEpochId ; epochId ++ ) { (...) = getStateOfRewardsFromDataProviders (..., epochId , ...); }","title":"Delegation by amount"},{"location":"tutorials/reward-claiming/reward-claiming-in-detail/#events","text":"For every call of claimReward or claimRewardFromDataProviders one or more events of the following type are issued. A specific event is associated with a single pair of price provider and reward epoch. event RewardClaimed ( address indexed dataProvider , address indexed whoClaimed , address indexed sentTo , uint256 rewardEpoch , uint256 amount ) Parameters: dataProvider : The address to which the reward was allocated. whoClaimed : The address from which the reward claim was initiated. sentTo : The address to which the amount was sent. rewardEpoch : The ID of the reward epoch the claimed reward corresponds to. amount : The value of the claimed reward.","title":"Events"},{"location":"tutorials/reward-claiming/reward-claiming-in-detail/#reward-claim-expiry","text":"The reward can be claimed from the time the reward was allocated until the reward expiry epoch. The oldest and the newest reward epoch that allow reward claiming can be obtained by calling getEpochsWithClaimableRewards (these correspond to the return values _startEpochId and _endEpochId , respectively). function getEpochsWithClaimableRewards () external view returns ( uint256 _startEpochId , uint256 _endEpochId ) The reward expiry epoch is also communicated through RewardClaimsExpired event. event RewardClaimsExpired ( uint256 rewardEpochId ) The information for which epochs the rewards have been already claimed can be obtained by checking the state of rewards described in the following section.","title":"Reward claim expiry"},{"location":"tutorials/reward-claiming/reward-claiming-in-detail/#reward-amount-in-depth","text":"","title":"Reward amount in depth"},{"location":"tutorials/reward-claiming/reward-claiming-in-detail/#overview","text":"Suppose a total reward amount REWARD is allocated to a price provider P for a reward epoch E . This reward is divided among P and users who delegated to P depending on the WSGB vote power share and P 's fee percentage. Let PVP be the total WSGB vote power associated with P . This is the sum of P 's own undelegated WSGB vote power and the WSGB vote powers that have been delegated to P . The vote power snapshot is used, which corresponds to a specific block before the start of E (vote power block). Suppose SHARE is the vote power share: for P this is the ratio between P 's own undelegated WNat vote power and PVP , for delegator this is the ratio between the WNat vote power that the delegator has delegated to P and PVP . Suppose FP denotes P 's fee percentage for E . Then P is entitled to the reward equal to (SHARE * (1 - FP) * REWARD) + (FP * REWARD) , and a delegator is entitled to the amount equal to SHARE * (1 - FP) * REWARD .","title":"Overview"},{"location":"tutorials/reward-claiming/reward-claiming-in-detail/#state-of-rewards","text":"The reward amounts for a specific address can be checked by calling either getStateOfRewards or getStateOfRewardsFromDataProviders . The difference between these two functions is that in the first the array of price providers (to which the reward is initially allocated) is obtained based on delegation history, while in the second the array has to be specified as an input parameter. Note that getStateOfRewards can only be used for addresses that are declared to be delegating by percentage. function getStateOfRewards ( address _beneficiary , uint256 _rewardEpoch ) external view returns ( address [] memory _dataProviders , uint256 [] memory _rewardAmounts , bool [] memory _claimed , bool _claimable ) function getStateOfRewardsFromDataProviders ( address _beneficiary , uint256 _rewardEpoch , address [] memory _dataProviders ) external view returns ( uint256 [] memory _rewardAmounts , bool [] memory _claimed , bool _claimable ) Parameters: _beneficiary : The address for which the state is being checked. _rewardEpoch : The id of the reward epoch for which the state is being checked. _dataProviders : The positional array of addresses representing the price providers the rewards have been allocated to. _rewardAmounts : The positional array of values representing the reward amounts the _beneficiary is entitled to. _claimed : The positional array of boolean values indicating if the reward amount has already been claimed. _claimable : The boolean value indicating if the reward amounts are claimable (i.e., are available and have not expired). Note that the amounts reported by these two methods are informational and can slightly differ from the actual amounts obtained via claimReward and claimRewardFromDataProviders due to rounding.","title":"State of rewards"},{"location":"tutorials/reward-claiming/reward-claiming-in-detail/#reward-fee","text":"","title":"Reward fee"},{"location":"tutorials/reward-claiming/reward-claiming-in-detail/#current-fee-percentage","text":"Price provider fee is determined by fee percentage. Current setting can be obtained by getDataProviderCurrentFeePercentage . function getDataProviderCurrentFeePercentage ( address _dataProvider ) external view returns ( uint256 _feePercentageBIPS ) The value _feePercentageBIPS is given in basis points (BIPS), which is a percentage value multiplied by 100 (e.g., 10% fee is 1000).","title":"Current fee percentage"},{"location":"tutorials/reward-claiming/reward-claiming-in-detail/#scheduled-fee-percentage-changes","text":"The fee percentage is subject to changes. The changes made by price providers are time locked, meaning they are scheduled for some future time. Scheduled changes can be checked by calling getDataProviderScheduledFeePercentageChanges , which returns the fee percentages in future. function getDataProviderScheduledFeePercentageChanges ( address _dataProvider ) external view returns ( uint256 [] memory _feePercentageBIPS , uint256 [] memory _validFromEpoch , bool [] memory _fixed ) Parameters: _dataProvder : The address representing a price provider. _feePercentageBIPS : The positional array of scheduled fee percentages in BIPS. validFromEpoch : The positional array of future reward epoch ids from which the value _feePercentageBIPS will be effective. _fixed : The positional array of boolean values indicating if the setting is fixed. If the scheduled fee percentage is not fixed, this means that it can still be updated by price provider over the course of the current reward epoch. After the current reward epoch passes, the setting becomes fixed.","title":"Scheduled fee percentage changes"},{"location":"tutorials/reward-faq/","text":"Reward claiming FAQ \u00b6 Am I eligible for rewards? \u00b6 If you have delegated vote power in the snapshot block of a reward epoch, and this reward epoch was finalized, you should be eligible to claim some rewards. What contributes to the amount of reward one can claim? \u00b6 This depends on a few factors: How much vote power was delegated and to which price providers. What was the performance of those price providers. How much fee do those price providers take. Was the total vote power of this price provider above the vote power cap. How do I see how much reward I can claim? \u00b6 This depends on the wallet you are using. See wallets section to find more information and see the FAQ below for metamask users. How do I claim my rewards? \u00b6 See wallets section to find more information and see the FAQ below for metamask users. When do I need to claim my rewards? \u00b6 Rewards not claimed within 90 days will be re-allocated to the reward pool. After claiming my rewards, how can I delegate the newly claimed SGB? \u00b6 After you have successfully claimed your rewards, you receive SGB tokens. Once you wrap this SGB to wSGB, your delegation will automatically be updated with the new wSGB balance, thus you do NOT need to change the delegation settings. How do I know if I have any rewards to claim? \u00b6 As general guidance, if you wrapped your SGB, delegated your voting power and there was a vote power block and full reward epoch you should have rewards to claim, those should appear as your claimable rewards as seen in the relevant wallet you used for the delegation. Info Rewards can be claimed within 90 days so please remember to claim those within a reasonable time so they won\u2019t get lost, and obviously re-delegate to gain compound interest. Where can I check the amount of rewards I have accrued in the current reward epoch? \u00b6 You can check the current amount of rewards (and unclaimed rewards) using the FtsoRewardManager contract ( getStateOfRewards ) or using your wallet. See wallets section to find details for a specific wallet. I have claimed my rewards, how can I delegate the newly claimed SGB? \u00b6 After you have successfully claimed your rewards, you will receive SGB. Once you wrap this SGB to WSGB, your delegation will automatically be updated to the new WSGB value and you do NOT need to change delegations. You are always delegating a selected percentage of your full WSGB holdings. How long do I have to wait to claim my rewards? \u00b6 Rewards can be claimed after the end of each reward epoch (currently 7 days), so the rewards can be claimed every 7 days. Take care, that you need to wait for the full reward epoch in which you have delegated your vote power, to be able to claim. Do I need to claim as fast as a reward epoch ends to maximize my earnings from delegations? \u00b6 No. Claimed rewards cannot participate in the reward epoch they were claimed in. They can participate in the next reward epoch as long as they are wrapped roughly before the last quarter of the current reward epoch (in terms of blocks produced). What is the Reward rate? \u00b6 Reward rate is a metric of yield of data providers describing how many WSGB tokens were being earned by a data provider during a reward epoch for delegated 100 WSGB. It is calculated as total_reward/vote_power*(100 - fee) , where fee is given in percentages. What is a vote power cap and how does it influence my yields? \u00b6 To facilitate decentralization of the network a share of vote power considered for rewarding is capped to 10% of all WSGB in circulation. If a data provider gets more vote power through delegations, only a part of vote power (up to vote power cap) will compete for rewards while earned rewards will be distributed to all delegators, making the yield (reward rate) of the data provider lower.","title":"Reward claiming FAQ"},{"location":"tutorials/reward-faq/#reward-claiming-faq","text":"","title":"Reward claiming FAQ"},{"location":"tutorials/reward-faq/#am-i-eligible-for-rewards","text":"If you have delegated vote power in the snapshot block of a reward epoch, and this reward epoch was finalized, you should be eligible to claim some rewards.","title":"Am I eligible for rewards?"},{"location":"tutorials/reward-faq/#what-contributes-to-the-amount-of-reward-one-can-claim","text":"This depends on a few factors: How much vote power was delegated and to which price providers. What was the performance of those price providers. How much fee do those price providers take. Was the total vote power of this price provider above the vote power cap.","title":"What contributes to the amount of reward one can claim?"},{"location":"tutorials/reward-faq/#how-do-i-see-how-much-reward-i-can-claim","text":"This depends on the wallet you are using. See wallets section to find more information and see the FAQ below for metamask users.","title":"How do I see how much reward I can claim?"},{"location":"tutorials/reward-faq/#how-do-i-claim-my-rewards","text":"See wallets section to find more information and see the FAQ below for metamask users.","title":"How do I claim my rewards?"},{"location":"tutorials/reward-faq/#when-do-i-need-to-claim-my-rewards","text":"Rewards not claimed within 90 days will be re-allocated to the reward pool.","title":"When do I need to claim my rewards?"},{"location":"tutorials/reward-faq/#after-claiming-my-rewards-how-can-i-delegate-the-newly-claimed-sgb","text":"After you have successfully claimed your rewards, you receive SGB tokens. Once you wrap this SGB to wSGB, your delegation will automatically be updated with the new wSGB balance, thus you do NOT need to change the delegation settings.","title":"After claiming my rewards, how can I delegate the newly claimed SGB?"},{"location":"tutorials/reward-faq/#how-do-i-know-if-i-have-any-rewards-to-claim","text":"As general guidance, if you wrapped your SGB, delegated your voting power and there was a vote power block and full reward epoch you should have rewards to claim, those should appear as your claimable rewards as seen in the relevant wallet you used for the delegation. Info Rewards can be claimed within 90 days so please remember to claim those within a reasonable time so they won\u2019t get lost, and obviously re-delegate to gain compound interest.","title":"How do I know if I have any rewards to claim?"},{"location":"tutorials/reward-faq/#where-can-i-check-the-amount-of-rewards-i-have-accrued-in-the-current-reward-epoch","text":"You can check the current amount of rewards (and unclaimed rewards) using the FtsoRewardManager contract ( getStateOfRewards ) or using your wallet. See wallets section to find details for a specific wallet.","title":"Where can I check the amount of rewards I have accrued in the current reward epoch?"},{"location":"tutorials/reward-faq/#i-have-claimed-my-rewards-how-can-i-delegate-the-newly-claimed-sgb","text":"After you have successfully claimed your rewards, you will receive SGB. Once you wrap this SGB to WSGB, your delegation will automatically be updated to the new WSGB value and you do NOT need to change delegations. You are always delegating a selected percentage of your full WSGB holdings.","title":"I have claimed my rewards, how can I delegate the newly claimed SGB?"},{"location":"tutorials/reward-faq/#how-long-do-i-have-to-wait-to-claim-my-rewards","text":"Rewards can be claimed after the end of each reward epoch (currently 7 days), so the rewards can be claimed every 7 days. Take care, that you need to wait for the full reward epoch in which you have delegated your vote power, to be able to claim.","title":"How long do I have to wait to claim my rewards?"},{"location":"tutorials/reward-faq/#do-i-need-to-claim-as-fast-as-a-reward-epoch-ends-to-maximize-my-earnings-from-delegations","text":"No. Claimed rewards cannot participate in the reward epoch they were claimed in. They can participate in the next reward epoch as long as they are wrapped roughly before the last quarter of the current reward epoch (in terms of blocks produced).","title":"Do I need to claim as fast as a reward epoch ends to maximize my earnings from delegations?"},{"location":"tutorials/reward-faq/#what-is-the-reward-rate","text":"Reward rate is a metric of yield of data providers describing how many WSGB tokens were being earned by a data provider during a reward epoch for delegated 100 WSGB. It is calculated as total_reward/vote_power*(100 - fee) , where fee is given in percentages.","title":"What is the Reward rate?"},{"location":"tutorials/reward-faq/#what-is-a-vote-power-cap-and-how-does-it-influence-my-yields","text":"To facilitate decentralization of the network a share of vote power considered for rewarding is capped to 10% of all WSGB in circulation. If a data provider gets more vote power through delegations, only a part of vote power (up to vote power cap) will compete for rewards while earned rewards will be distributed to all delegators, making the yield (reward rate) of the data provider lower.","title":"What is a vote power cap and how does it influence my yields?"},{"location":"tutorials/reward-faq/block-explorer-%2B-metamask/","text":"Block explorer + metamask FAQ \u00b6 Where is the reward data found? \u00b6 All reward data can be found in the FTSO Reward Manager . All claiming can be done here https://songbird-explorer.flare.network/address/0xc5738334b972745067fFa666040fdeADc66Cb925/write-contract. For which reward epochs can I claim rewards? \u00b6 In the FTSO reward manager see API no. 11 getEpochsWithUnclaimedRewards(beneficiary_address) What is the claim API? \u00b6 Api for claiming can be found in the FTSO Reward Manager, see API no 3: claimReward (_recipient address, _rewardEpochs uint256[]) . The address should be your address and reward epochs should include the list of epochs you want to claim rewards for. You may claim rewards for multiple epochs at one go. Where can I check the amount of rewards I have accrued in a reward epoch? \u00b6 You can check the current amount of rewards (and unclaimed rewards) in the FtsoRewardManager API no. 14 getStateOfRewards(beneficiery address, rewardEpoch)","title":"Block explorer + metamask FAQ"},{"location":"tutorials/reward-faq/block-explorer-%2B-metamask/#block-explorer-metamask-faq","text":"","title":"Block explorer + metamask FAQ"},{"location":"tutorials/reward-faq/block-explorer-%2B-metamask/#where-is-the-reward-data-found","text":"All reward data can be found in the FTSO Reward Manager . All claiming can be done here https://songbird-explorer.flare.network/address/0xc5738334b972745067fFa666040fdeADc66Cb925/write-contract.","title":"Where is the reward data found?"},{"location":"tutorials/reward-faq/block-explorer-%2B-metamask/#for-which-reward-epochs-can-i-claim-rewards","text":"In the FTSO reward manager see API no. 11 getEpochsWithUnclaimedRewards(beneficiary_address)","title":"For which reward epochs can I claim rewards?"},{"location":"tutorials/reward-faq/block-explorer-%2B-metamask/#what-is-the-claim-api","text":"Api for claiming can be found in the FTSO Reward Manager, see API no 3: claimReward (_recipient address, _rewardEpochs uint256[]) . The address should be your address and reward epochs should include the list of epochs you want to claim rewards for. You may claim rewards for multiple epochs at one go.","title":"What is the claim API?"},{"location":"tutorials/reward-faq/block-explorer-%2B-metamask/#where-can-i-check-the-amount-of-rewards-i-have-accrued-in-a-reward-epoch","text":"You can check the current amount of rewards (and unclaimed rewards) in the FtsoRewardManager API no. 14 getStateOfRewards(beneficiery address, rewardEpoch)","title":"Where can I check the amount of rewards I have accrued in a reward epoch?"},{"location":"tutorials/wallets/","text":"Wallets \u00b6 Choose your wallet from the navigation menu.","title":"Wallets"},{"location":"tutorials/wallets/#wallets","text":"Choose your wallet from the navigation menu.","title":"Wallets"},{"location":"tutorials/wallets/bifrost-wallet/","text":"Bifrost Wallet \u00b6 Bifrost Wallet is a non-custodial mobile wallet available for both Android and iOS. You can view your portfolio of crypto assets, access decentralized applications through the in-app browser and perform operations on various blockchain networks, including sending, receiving, wrapping and delegating Songbird (SGB). Getting Started \u00b6 Start by downloading Bifrost Wallet from the Apple App Store or Google Play Store and either create a new wallet or import an existing one from a recovery phrase. The official guides in the Bifrost Wallet help center may be of assistance. Wrap and Delegate \u00b6 To wrap and delegate your SGB using Bifrost Wallet, see their official guide or follow the steps outlined below: Open the app and create or restore a wallet Click on the Songbird asset row on the home screen (visible once you hold some Songbird) Click the 3 horizontal dots on the upper right hand side of the screen, and click Wrap Select the amount of SGB you wish to wrap and click Continue Click Confirm and then Close Select the back arrow in the upper left hand corner of the screen You will now see a second asset row on your home screen for Wrapped Songbird (WSGB) Click on the Wrapped Songbird asset row Click the 3 horizontal dots on the upper right hand side of the screen and click Delegate Click the Add Provider tab toward the bottom of the screen Select which provider you want to delegate to (you can select up to 2 providers) Choose the percentage (%) of your WSGB you wish to delegate to that specific provider Click Continue then click Confirm and finally click Close Repeat steps #10 to #13 if you wish to delegate to a second provider","title":"Bifrost Wallet"},{"location":"tutorials/wallets/bifrost-wallet/#bifrost-wallet","text":"Bifrost Wallet is a non-custodial mobile wallet available for both Android and iOS. You can view your portfolio of crypto assets, access decentralized applications through the in-app browser and perform operations on various blockchain networks, including sending, receiving, wrapping and delegating Songbird (SGB).","title":"Bifrost Wallet"},{"location":"tutorials/wallets/bifrost-wallet/#getting-started","text":"Start by downloading Bifrost Wallet from the Apple App Store or Google Play Store and either create a new wallet or import an existing one from a recovery phrase. The official guides in the Bifrost Wallet help center may be of assistance.","title":"Getting Started"},{"location":"tutorials/wallets/bifrost-wallet/#wrap-and-delegate","text":"To wrap and delegate your SGB using Bifrost Wallet, see their official guide or follow the steps outlined below: Open the app and create or restore a wallet Click on the Songbird asset row on the home screen (visible once you hold some Songbird) Click the 3 horizontal dots on the upper right hand side of the screen, and click Wrap Select the amount of SGB you wish to wrap and click Continue Click Confirm and then Close Select the back arrow in the upper left hand corner of the screen You will now see a second asset row on your home screen for Wrapped Songbird (WSGB) Click on the Wrapped Songbird asset row Click the 3 horizontal dots on the upper right hand side of the screen and click Delegate Click the Add Provider tab toward the bottom of the screen Select which provider you want to delegate to (you can select up to 2 providers) Choose the percentage (%) of your WSGB you wish to delegate to that specific provider Click Continue then click Confirm and finally click Close Repeat steps #10 to #13 if you wish to delegate to a second provider","title":"Wrap and Delegate"},{"location":"tutorials/wallets/brave-wallet/","text":"Brave Wallet \u00b6 Brave Browser now offers a non-custodial software wallet on both Windows and macOS for Ethereum Virtual Machine (EVM) integrated chains such as Songbird. Getting Started \u00b6 To use Brave Wallet with Songbird (SGB), first make sure that you have: Downloaded Brave Browser to your computer, *version 1.34.80 or later. Initialized a Brave wallet or restore an existing one. Protected your Brave wallet with a password. Backed up your crypto wallet with a 12-word recovery phrase. Once your wallet is set up you will need to connect to Songbird. Connecting to the Songbird involves adding a custom network via the following steps: Open Brave Browser on your computer. Navigate to settings and select \u2018Wallet\u2019 from the list of options. In the box on the right click \u2018Networks\u2019, then \u2018Add\u2019. Input the following information in the appropriate fields: a) The id of new chain : 19 b) Enter name of new chain : Songbird c) Chain\u2019s currency name : SGB d) Chain\u2019s currency symbol : SGB e) Chain\u2019s currency decimals : 18 f) RPC URLs : https://songbird.towolabs.com/rpc g) Icon URLs : (leave blank) h) Block Explorer URLs: https://songbird-explorer.flare.network i) Click \u2018Submit\u2019 To finish connecting: Enter your password and login to your wallet. On the left of the screen next to \u2018Balance\u2019 click the drop-down menu and select Songbird. Songbird network connection is now complete. Wrap and Delegate \u00b6 Brave users can access existing decentralized applications (dApps) created by independent signal providers to wrap and delegate their SGB/WSGB, via the following steps: Open Brave Browser and login to your wallet (make sure you are connected to Songbird). Open a second search tab within Brave. Enter the address of the website or dApp you wish to use to wrap and delegate in the search bar at the top of the screen. Delegating using this method is not exclusive to one specific signal provider, as some dApps (such as FTSO AU) allow you to choose from several different signal providers. Follow the prompts to connect your Brave wallet and sign transactions when wrapping, delegating, or claiming rewards. Other signal providers are hosting similar websites or dApps for wrapping and delegation. See the full list of signal providers on Songbird at flarematrics.io","title":"Brave Wallet"},{"location":"tutorials/wallets/brave-wallet/#brave-wallet","text":"Brave Browser now offers a non-custodial software wallet on both Windows and macOS for Ethereum Virtual Machine (EVM) integrated chains such as Songbird.","title":"Brave Wallet"},{"location":"tutorials/wallets/brave-wallet/#getting-started","text":"To use Brave Wallet with Songbird (SGB), first make sure that you have: Downloaded Brave Browser to your computer, *version 1.34.80 or later. Initialized a Brave wallet or restore an existing one. Protected your Brave wallet with a password. Backed up your crypto wallet with a 12-word recovery phrase. Once your wallet is set up you will need to connect to Songbird. Connecting to the Songbird involves adding a custom network via the following steps: Open Brave Browser on your computer. Navigate to settings and select \u2018Wallet\u2019 from the list of options. In the box on the right click \u2018Networks\u2019, then \u2018Add\u2019. Input the following information in the appropriate fields: a) The id of new chain : 19 b) Enter name of new chain : Songbird c) Chain\u2019s currency name : SGB d) Chain\u2019s currency symbol : SGB e) Chain\u2019s currency decimals : 18 f) RPC URLs : https://songbird.towolabs.com/rpc g) Icon URLs : (leave blank) h) Block Explorer URLs: https://songbird-explorer.flare.network i) Click \u2018Submit\u2019 To finish connecting: Enter your password and login to your wallet. On the left of the screen next to \u2018Balance\u2019 click the drop-down menu and select Songbird. Songbird network connection is now complete.","title":"Getting Started"},{"location":"tutorials/wallets/brave-wallet/#wrap-and-delegate","text":"Brave users can access existing decentralized applications (dApps) created by independent signal providers to wrap and delegate their SGB/WSGB, via the following steps: Open Brave Browser and login to your wallet (make sure you are connected to Songbird). Open a second search tab within Brave. Enter the address of the website or dApp you wish to use to wrap and delegate in the search bar at the top of the screen. Delegating using this method is not exclusive to one specific signal provider, as some dApps (such as FTSO AU) allow you to choose from several different signal providers. Follow the prompts to connect your Brave wallet and sign transactions when wrapping, delegating, or claiming rewards. Other signal providers are hosting similar websites or dApps for wrapping and delegation. See the full list of signal providers on Songbird at flarematrics.io","title":"Wrap and Delegate"},{"location":"tutorials/wallets/dcent-wallet/","text":"D'CENT Wallet \u00b6 D'CENT Biometric Wallet is a non-custodial hardware wallet and is considered one of the most secure ways to manage your crypto assets. Getting Started \u00b6 Purchase a D'CENT Biometric hardware wallet from the official D'CENT shop or download their software wallet/mobile app from the Apple App Store or Google Play Store . Then either initialize a new wallet or import an existing one from a recovery phrase. The official D'cent device setup help guides can be found here: https://userguide.dcentwallet.com/biometric-wallet/setting-up Once your device is set up and synced with the mobile app you will need to add SGB to your listed assets: Ensure the D'cent biometric wallet is updated with the latest firmware, v2.16.7 or later Login to your D'cent mobile app and have your device turned on, unlocked, and paired via Bluetooth Click the + sign on the bottom right of the Account tab Search Songbird in the search box Select the Songbird Token (SGB) Name your SGB account and click Create Wrap and Delegate \u00b6 Users can wrap and delegate their SGB/WSGB using D'cent`s native FTSO Portal: Click the Discovery tab at the bottom middle of the screen Select the FTSO Portal from the menu then click Go Choose the Songbird account you wish to use and click Connect You will need to wrap your SGB by clicking SGB \u2194\ufe0f WSGB marked in green near the top middle of the screen Input the SGB amount you want to wrap and click the green SGB \u2194\ufe0f WSGB box Click Confirm and follow the prompts to sign the transaction with your hardware device You can now delegate your WSGB by clicking Add delegation . Providers listed as a Partner have additional security features integrated with D'cent . Select a provider and input a % amount of WSGB holdings you want to delegate to their service and press Delegate Click Confirm and follow the prompts to sign the transaction with your hardware device Repeat steps 7 - 9 if you wish to add a second provider (up to two)","title":"D'CENT Wallet"},{"location":"tutorials/wallets/dcent-wallet/#dcent-wallet","text":"D'CENT Biometric Wallet is a non-custodial hardware wallet and is considered one of the most secure ways to manage your crypto assets.","title":"D'CENT Wallet"},{"location":"tutorials/wallets/dcent-wallet/#getting-started","text":"Purchase a D'CENT Biometric hardware wallet from the official D'CENT shop or download their software wallet/mobile app from the Apple App Store or Google Play Store . Then either initialize a new wallet or import an existing one from a recovery phrase. The official D'cent device setup help guides can be found here: https://userguide.dcentwallet.com/biometric-wallet/setting-up Once your device is set up and synced with the mobile app you will need to add SGB to your listed assets: Ensure the D'cent biometric wallet is updated with the latest firmware, v2.16.7 or later Login to your D'cent mobile app and have your device turned on, unlocked, and paired via Bluetooth Click the + sign on the bottom right of the Account tab Search Songbird in the search box Select the Songbird Token (SGB) Name your SGB account and click Create","title":"Getting Started"},{"location":"tutorials/wallets/dcent-wallet/#wrap-and-delegate","text":"Users can wrap and delegate their SGB/WSGB using D'cent`s native FTSO Portal: Click the Discovery tab at the bottom middle of the screen Select the FTSO Portal from the menu then click Go Choose the Songbird account you wish to use and click Connect You will need to wrap your SGB by clicking SGB \u2194\ufe0f WSGB marked in green near the top middle of the screen Input the SGB amount you want to wrap and click the green SGB \u2194\ufe0f WSGB box Click Confirm and follow the prompts to sign the transaction with your hardware device You can now delegate your WSGB by clicking Add delegation . Providers listed as a Partner have additional security features integrated with D'cent . Select a provider and input a % amount of WSGB holdings you want to delegate to their service and press Delegate Click Confirm and follow the prompts to sign the transaction with your hardware device Repeat steps 7 - 9 if you wish to add a second provider (up to two)","title":"Wrap and Delegate"},{"location":"tutorials/wallets/how-to-access-flare-network-with-a-ledger-device/","text":"Ledger Nano X and Nano S \u00b6 Hardware wallets are considered among the more secure options to manage crypto assets and store private keys. Your crypto assets can remain safe, even if your computer or phone is compromised, as long as you keep your recovery phrase safe and review all transaction details before confirming transactions. Getting Started \u00b6 To use your Ledger device with Songbird (SGB), first make sure that you have: Initialized your Ledger device with a recovery phrase Protected your Ledger device with a PIN code Ledger Live is installed, open and ready to use Installed the latest Ledger device firmware Installed the latest version of the Ledger Ethereum app Installed the latest version of Google Chrome Installed the MetaMask browser extension version 10.5.0 or later Install the Songbird App \u00b6 After meeting the requirements, you can install the Songbird app by following these steps: Open the Manager in Ledger Live Connect and unlock your Ledger device Allow the manager on your Ledger device by pressing both buttons Find Songbird in the app catalog Click the Install button of the app Your Ledger device will display Processing\u2026 The app installation is complete Info Both Ethereum and Songbird Ledger apps can be used to sign transactions for the Songbird network. Use Ledger Device with MetaMask \u00b6 You can access Songbird by using your Ledger device with the MetaMask browser extension . Open the MetaMask browser extension and login Click on Custom RPC in the networks dropdown a) Enter network name: Songbird b) Enter RPC URL: https://songbird.towolabs.com/rpc c) Enter chain ID: 19 d) Enter symbol: SGB e) Enter block explorer URL: https://songbird-explorer.flare.network f) Click Save Select Songbird in the networks dropdown Connect your Ledger device using USB Open the Songbird app on your Ledger device If Ledger Live is still running, you must now quit the app on your computer In Advanced Settings ensure that the \u2018Preferred Ledger Connection Type\u2019 is set to \u201cWebHID\u201d in the drop-down menu (it should be the case by default). Click your account image and Connect Hardware Wallet A pop up box will appear listing paired Human Interface Devices (HID). Highlight your Ledger S or Ledger X and click Connect Select your Account and click Unlock Info Please note that Towo Labs RPC node available at https://songbird.towolabs.com/rpc is only for individuals and not for commercial use . Companies and developers may contact Towo Labs to arrange dedicated access. You will see your SGB balance on the overview. To receive SGB, copy your account address and share it with the sender. To send SGB, click Send and enter the recipient address, enter the desired amount and click Next. If prompted, allow MetaMask to open Ledger Live and open the device bridge. Follow the on screen instructions to confirm or reject the transaction on your Ledger device. Warning Always review all transaction details on your Ledger device before confirming any transaction! Wrap and Delegate \u00b6 Once connected to the Songbird network, enter the address of the website or dapp you wish to use to wrap and delegate in the Metamask browser. A few of the data providers have developed dapps integrated with their websites that allow users to wrap, delegate and claim SGB rewards. Delegating using this method is not exclusive to one specific provider, as these dapps allow you to choose from a number of different providers. Examples of data providers that have developed dapps for wrapping and delegation are FTSO AU and Aureus Ox. Their dapps are available at app.ftso.com.au and aureusox.com/dashboard . Other providers have their own websites and are developing similar dapps. See the full list of active signal providers on flaremetrics.io/ftso .","title":"Ledger Nano X and Nano S"},{"location":"tutorials/wallets/how-to-access-flare-network-with-a-ledger-device/#ledger-nano-x-and-nano-s","text":"Hardware wallets are considered among the more secure options to manage crypto assets and store private keys. Your crypto assets can remain safe, even if your computer or phone is compromised, as long as you keep your recovery phrase safe and review all transaction details before confirming transactions.","title":"Ledger Nano X and Nano S"},{"location":"tutorials/wallets/how-to-access-flare-network-with-a-ledger-device/#getting-started","text":"To use your Ledger device with Songbird (SGB), first make sure that you have: Initialized your Ledger device with a recovery phrase Protected your Ledger device with a PIN code Ledger Live is installed, open and ready to use Installed the latest Ledger device firmware Installed the latest version of the Ledger Ethereum app Installed the latest version of Google Chrome Installed the MetaMask browser extension version 10.5.0 or later","title":"Getting Started"},{"location":"tutorials/wallets/how-to-access-flare-network-with-a-ledger-device/#install-the-songbird-app","text":"After meeting the requirements, you can install the Songbird app by following these steps: Open the Manager in Ledger Live Connect and unlock your Ledger device Allow the manager on your Ledger device by pressing both buttons Find Songbird in the app catalog Click the Install button of the app Your Ledger device will display Processing\u2026 The app installation is complete Info Both Ethereum and Songbird Ledger apps can be used to sign transactions for the Songbird network.","title":"Install the Songbird App"},{"location":"tutorials/wallets/how-to-access-flare-network-with-a-ledger-device/#use-ledger-device-with-metamask","text":"You can access Songbird by using your Ledger device with the MetaMask browser extension . Open the MetaMask browser extension and login Click on Custom RPC in the networks dropdown a) Enter network name: Songbird b) Enter RPC URL: https://songbird.towolabs.com/rpc c) Enter chain ID: 19 d) Enter symbol: SGB e) Enter block explorer URL: https://songbird-explorer.flare.network f) Click Save Select Songbird in the networks dropdown Connect your Ledger device using USB Open the Songbird app on your Ledger device If Ledger Live is still running, you must now quit the app on your computer In Advanced Settings ensure that the \u2018Preferred Ledger Connection Type\u2019 is set to \u201cWebHID\u201d in the drop-down menu (it should be the case by default). Click your account image and Connect Hardware Wallet A pop up box will appear listing paired Human Interface Devices (HID). Highlight your Ledger S or Ledger X and click Connect Select your Account and click Unlock Info Please note that Towo Labs RPC node available at https://songbird.towolabs.com/rpc is only for individuals and not for commercial use . Companies and developers may contact Towo Labs to arrange dedicated access. You will see your SGB balance on the overview. To receive SGB, copy your account address and share it with the sender. To send SGB, click Send and enter the recipient address, enter the desired amount and click Next. If prompted, allow MetaMask to open Ledger Live and open the device bridge. Follow the on screen instructions to confirm or reject the transaction on your Ledger device. Warning Always review all transaction details on your Ledger device before confirming any transaction!","title":"Use Ledger Device with MetaMask"},{"location":"tutorials/wallets/how-to-access-flare-network-with-a-ledger-device/#wrap-and-delegate","text":"Once connected to the Songbird network, enter the address of the website or dapp you wish to use to wrap and delegate in the Metamask browser. A few of the data providers have developed dapps integrated with their websites that allow users to wrap, delegate and claim SGB rewards. Delegating using this method is not exclusive to one specific provider, as these dapps allow you to choose from a number of different providers. Examples of data providers that have developed dapps for wrapping and delegation are FTSO AU and Aureus Ox. Their dapps are available at app.ftso.com.au and aureusox.com/dashboard . Other providers have their own websites and are developing similar dapps. See the full list of active signal providers on flaremetrics.io/ftso .","title":"Wrap and Delegate"},{"location":"tutorials/wallets/how-to-access-flare-network-with-a-trezor-device/","text":"Trezor T \u00b6 Hardware wallets are considered among the more secure options to manage crypto assets and store private keys. Your crypto assets can remain safe, even if your computer or phone is compromised, as long as you keep your recovery phrase safe and review all transaction details before confirming transactions. Getting Started \u00b6 To use your Trezor device with Songbird (SGB), first make sure that you have: Initialized your Trezor device with a recovery phrase Protected your Trezor device with a PIN code Trezor Suite is installed, open and ready to use Enabled Ethereum under the Crypto tab in Trezor Suite Installed the latest Trezor device firmware Installed the latest version of Google Chrome Installed the MetaMask browser extension Use Trezor T Device with MetaMask \u00b6 You can access Songbird by using your Trezor T with the MetaMask browser extension . Open the MetaMask browser extension in your browser Click on Custom RPC in the networks dropdown a) Enter network name: Songbird b) Enter RPC URL: https://songbird.towolabs.com/rpc c) Enter chain ID: 19 d) Enter symbol: SGB e) Enter block explorer URL: https://songbird-explorer.flare.network f) Click Save Select Songbird in the networks dropdown Connect and unlock your Trezor device Click your account image and Connect Hardware Wallet Select Trezor and click Continue Follow the on screen instructions to export your public key Select your Account and click Unlock Info Please note that Towo Labs RPC node available at: https://songbird.towolabs.com/rpc is only for individuals and not for commercial use . Companies and developers may contact Towo Labs to arrange dedicated access. You will see your SGB balance on the overview. To receive SGB, copy your account address and share it with the sender. To send SGB, click Send and enter the recipient address, enter the desired amount and click Next. Follow the on screen instructions to confirm or reject the transaction on your Trezor device. Warning Always review all transaction details on your Trezor device before confirming any transaction! Wrap and Delegate \u00b6 Once connected to the Songbird network, enter the address of the website or dapp you wish to use to wrap and delegate in the Metamask browser. A few of the data providers have developed dapps integrated with their websites that allow users to wrap, delegate and claim SGB rewards. Delegating using this method is not exclusive to one specific provider, as these dapps allow you to choose from a number of different providers. Examples of data providers that have developed dapps for wrapping and delegation are FTSO AU and Aureus Ox. Their dapps are available at app.ftso.com.au and aureusox.com/dashboard . Other providers have their own websites and are developing similar dapps. See the full list of active signal providers on flaremetrics.io/ftso .","title":"Trezor T"},{"location":"tutorials/wallets/how-to-access-flare-network-with-a-trezor-device/#trezor-t","text":"Hardware wallets are considered among the more secure options to manage crypto assets and store private keys. Your crypto assets can remain safe, even if your computer or phone is compromised, as long as you keep your recovery phrase safe and review all transaction details before confirming transactions.","title":"Trezor T"},{"location":"tutorials/wallets/how-to-access-flare-network-with-a-trezor-device/#getting-started","text":"To use your Trezor device with Songbird (SGB), first make sure that you have: Initialized your Trezor device with a recovery phrase Protected your Trezor device with a PIN code Trezor Suite is installed, open and ready to use Enabled Ethereum under the Crypto tab in Trezor Suite Installed the latest Trezor device firmware Installed the latest version of Google Chrome Installed the MetaMask browser extension","title":"Getting Started"},{"location":"tutorials/wallets/how-to-access-flare-network-with-a-trezor-device/#use-trezor-t-device-with-metamask","text":"You can access Songbird by using your Trezor T with the MetaMask browser extension . Open the MetaMask browser extension in your browser Click on Custom RPC in the networks dropdown a) Enter network name: Songbird b) Enter RPC URL: https://songbird.towolabs.com/rpc c) Enter chain ID: 19 d) Enter symbol: SGB e) Enter block explorer URL: https://songbird-explorer.flare.network f) Click Save Select Songbird in the networks dropdown Connect and unlock your Trezor device Click your account image and Connect Hardware Wallet Select Trezor and click Continue Follow the on screen instructions to export your public key Select your Account and click Unlock Info Please note that Towo Labs RPC node available at: https://songbird.towolabs.com/rpc is only for individuals and not for commercial use . Companies and developers may contact Towo Labs to arrange dedicated access. You will see your SGB balance on the overview. To receive SGB, copy your account address and share it with the sender. To send SGB, click Send and enter the recipient address, enter the desired amount and click Next. Follow the on screen instructions to confirm or reject the transaction on your Trezor device. Warning Always review all transaction details on your Trezor device before confirming any transaction!","title":"Use Trezor T Device with MetaMask"},{"location":"tutorials/wallets/how-to-access-flare-network-with-a-trezor-device/#wrap-and-delegate","text":"Once connected to the Songbird network, enter the address of the website or dapp you wish to use to wrap and delegate in the Metamask browser. A few of the data providers have developed dapps integrated with their websites that allow users to wrap, delegate and claim SGB rewards. Delegating using this method is not exclusive to one specific provider, as these dapps allow you to choose from a number of different providers. Examples of data providers that have developed dapps for wrapping and delegation are FTSO AU and Aureus Ox. Their dapps are available at app.ftso.com.au and aureusox.com/dashboard . Other providers have their own websites and are developing similar dapps. See the full list of active signal providers on flaremetrics.io/ftso .","title":"Wrap and Delegate"},{"location":"tutorials/wallets/how-to-access-flare-network-with-metamask/","text":"MetaMask \u00b6 The MetaMask browser extension is a convenient way to access and interact with blockchains like Songbird. You access your Songbird (SGB) claim by adding a custom network to MetaMask. Make sure that you have securely backed up your recovery phrase before proceeding. Getting Started \u00b6 To use MetaMask with Songbird (SGB), first make sure that you have: Installed the latest version of Google Chrome Installed the MetaMask browser extension Created a new wallet or imported an existing wallet to MetaMask Securely backed up your recovery phrase offline Protected your MetaMask with a password Connect MetaMask to Songbird \u00b6 You can access Songbird by adding a custom network to the MetaMask browser extension: Open the MetaMask browser extension Unlock your MetaMask wallet with your password Click on Custom RPC in the network dropdown menu a) Enter network name: Songbird b) Enter RPC URL: https://songbird.towolabs.com/rpc c) Enter chain ID: 19 d) Enter symbol: SGB e) Enter block explorer URL: https://songbird-explorer.flare.network f) Click Save Select Songbird in the network dropdown menu Info Please note that Towo Labs RPC node available at: https://songbird.towolabs.com/rpc is only for individuals and not for commercial use . Companies and developers may contact Towo Labs to arrange dedicated access. You should now be able to see your Songbird (SGB) balance on the overview. To receive SGB, copy your account address and share it with the sender. To send SGB, click Send and enter the recipient address, enter the desired amount and click Next. Warning Always review all transaction details in MetaMask before confirming any transaction! Wrap and Delegate \u00b6 Once connected to the Songbird network, enter the address of the website or dapp you wish to use to wrap and delegate in the Metamask browser. A few of the data providers have developed dapps integrated with their websites that allow users to wrap, delegate and claim SGB rewards. Delegating using this method is not exclusive to one specific provider, as these dapps allow you to choose from a number of different providers. Examples of data providers that have developed dapps for wrapping and delegation are FTSO AU and Aureus Ox. Their dapps are available at app.ftso.com.au and aureusox.com/dashboard . Other providers have their own websites and are developing similar dapps. See the full list of active signal providers on flaremetrics.io/ftso .","title":"MetaMask"},{"location":"tutorials/wallets/how-to-access-flare-network-with-metamask/#metamask","text":"The MetaMask browser extension is a convenient way to access and interact with blockchains like Songbird. You access your Songbird (SGB) claim by adding a custom network to MetaMask. Make sure that you have securely backed up your recovery phrase before proceeding.","title":"MetaMask"},{"location":"tutorials/wallets/how-to-access-flare-network-with-metamask/#getting-started","text":"To use MetaMask with Songbird (SGB), first make sure that you have: Installed the latest version of Google Chrome Installed the MetaMask browser extension Created a new wallet or imported an existing wallet to MetaMask Securely backed up your recovery phrase offline Protected your MetaMask with a password","title":"Getting Started"},{"location":"tutorials/wallets/how-to-access-flare-network-with-metamask/#connect-metamask-to-songbird","text":"You can access Songbird by adding a custom network to the MetaMask browser extension: Open the MetaMask browser extension Unlock your MetaMask wallet with your password Click on Custom RPC in the network dropdown menu a) Enter network name: Songbird b) Enter RPC URL: https://songbird.towolabs.com/rpc c) Enter chain ID: 19 d) Enter symbol: SGB e) Enter block explorer URL: https://songbird-explorer.flare.network f) Click Save Select Songbird in the network dropdown menu Info Please note that Towo Labs RPC node available at: https://songbird.towolabs.com/rpc is only for individuals and not for commercial use . Companies and developers may contact Towo Labs to arrange dedicated access. You should now be able to see your Songbird (SGB) balance on the overview. To receive SGB, copy your account address and share it with the sender. To send SGB, click Send and enter the recipient address, enter the desired amount and click Next. Warning Always review all transaction details in MetaMask before confirming any transaction!","title":"Connect MetaMask to Songbird"},{"location":"tutorials/wallets/how-to-access-flare-network-with-metamask/#wrap-and-delegate","text":"Once connected to the Songbird network, enter the address of the website or dapp you wish to use to wrap and delegate in the Metamask browser. A few of the data providers have developed dapps integrated with their websites that allow users to wrap, delegate and claim SGB rewards. Delegating using this method is not exclusive to one specific provider, as these dapps allow you to choose from a number of different providers. Examples of data providers that have developed dapps for wrapping and delegation are FTSO AU and Aureus Ox. Their dapps are available at app.ftso.com.au and aureusox.com/dashboard . Other providers have their own websites and are developing similar dapps. See the full list of active signal providers on flaremetrics.io/ftso .","title":"Wrap and Delegate"},{"location":"tutorials/wallets/safepal-s1-wallet/","text":"SafePal S1 Wallet \u00b6 SafePal S1 is a non-custodial hardware wallet that is considered one of the most secure ways to manage your crypto assets. Getting Started \u00b6 Purchase a SafePal S1 hardware device from the official SafePal website in the products section and download their mobile app from either the Apple App Store or Google Play Store . Use of a SafePal S1 hardware wallet requires syncing the device with the mobile app. A step by step unboxing guide to initialize a new device/wallet, or import an existing one from a recovery phrase, can be found here: https://safepalsupport.zendesk.com/hc/en-us/articles/360046051752-How-to-Set-Up-a-S1-Hardware-Wallet Once your S1 device is set up and synced with the mobile app you will need to add SGB to your listed assets: Ensure the SafePal S1 is updated with the latest firmware, version V1.0.32 or later. Login to your SafePal mobile app and have your S1 device turned on and unlocked. Scroll to the bottom of your listed assets in the mobile app and select Add . Search for Songbird ( SGB ) and click the gray button on the right which will then turn blue. Click the Add Coin box also in blue at the bottom of the screen. Follow the series of prompts which require scanning QR codes from both your S1 wallet and mobile app to finalize adding the asset. Wrap and Delegate \u00b6 SafePal users can access existing decentralized applications (dApps) created by independent signal providers to wrap and delegate their SGB/WSGB: Open the SafePal mobile app and navigate to their built in web browser by clicking the four squares at the bottom middle of the screen. Enter the address of the website or dApp you wish to use to wrap and delegate in the search bar at the top of the screen.\\ Delegating using this method is not exclusive to one specific signal provider, as their dapps (examples listed below) allow you to choose from a number of different signal providers. After copying and pasting the address, click the drop-down menu to the right of the search tab. Scroll down, select the Songbird network, and click Go . A pop up will appear notifying that you are being redirected to a third party dApp. Press Confirm . Examples of signal providers that have developed dApps for wrapping and delegation are Best FTSO and FTSO AU . Other signal providers are hosting similar websites or dApps for wrapping and delegation. See the full list of signal providers on Songbird here at https://flaremetrics.io/ftso .","title":"SafePal S1 Wallet"},{"location":"tutorials/wallets/safepal-s1-wallet/#safepal-s1-wallet","text":"SafePal S1 is a non-custodial hardware wallet that is considered one of the most secure ways to manage your crypto assets.","title":"SafePal S1 Wallet"},{"location":"tutorials/wallets/safepal-s1-wallet/#getting-started","text":"Purchase a SafePal S1 hardware device from the official SafePal website in the products section and download their mobile app from either the Apple App Store or Google Play Store . Use of a SafePal S1 hardware wallet requires syncing the device with the mobile app. A step by step unboxing guide to initialize a new device/wallet, or import an existing one from a recovery phrase, can be found here: https://safepalsupport.zendesk.com/hc/en-us/articles/360046051752-How-to-Set-Up-a-S1-Hardware-Wallet Once your S1 device is set up and synced with the mobile app you will need to add SGB to your listed assets: Ensure the SafePal S1 is updated with the latest firmware, version V1.0.32 or later. Login to your SafePal mobile app and have your S1 device turned on and unlocked. Scroll to the bottom of your listed assets in the mobile app and select Add . Search for Songbird ( SGB ) and click the gray button on the right which will then turn blue. Click the Add Coin box also in blue at the bottom of the screen. Follow the series of prompts which require scanning QR codes from both your S1 wallet and mobile app to finalize adding the asset.","title":"Getting Started"},{"location":"tutorials/wallets/safepal-s1-wallet/#wrap-and-delegate","text":"SafePal users can access existing decentralized applications (dApps) created by independent signal providers to wrap and delegate their SGB/WSGB: Open the SafePal mobile app and navigate to their built in web browser by clicking the four squares at the bottom middle of the screen. Enter the address of the website or dApp you wish to use to wrap and delegate in the search bar at the top of the screen.\\ Delegating using this method is not exclusive to one specific signal provider, as their dapps (examples listed below) allow you to choose from a number of different signal providers. After copying and pasting the address, click the drop-down menu to the right of the search tab. Scroll down, select the Songbird network, and click Go . A pop up will appear notifying that you are being redirected to a third party dApp. Press Confirm . Examples of signal providers that have developed dApps for wrapping and delegation are Best FTSO and FTSO AU . Other signal providers are hosting similar websites or dApps for wrapping and delegation. See the full list of signal providers on Songbird here at https://flaremetrics.io/ftso .","title":"Wrap and Delegate"}]}